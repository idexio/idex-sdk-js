/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface USDCeMigratorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'custodian'
      | 'destinationAsset'
      | 'migrate'
      | 'nativeConverter',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'custodian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'destinationAsset',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'migrate',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'nativeConverter',
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: 'custodian', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'destinationAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nativeConverter',
    data: BytesLike,
  ): Result;
}

export interface USDCeMigrator extends BaseContract {
  connect(runner?: ContractRunner | null): USDCeMigrator;
  waitForDeployment(): Promise<this>;

  interface: USDCeMigratorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  custodian: TypedContractMethod<[], [string], 'view'>;

  destinationAsset: TypedContractMethod<[], [string], 'nonpayable'>;

  migrate: TypedContractMethod<
    [sourceAsset: AddressLike, quantityInAssetUnits: BigNumberish],
    [void],
    'nonpayable'
  >;

  nativeConverter: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'custodian',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'destinationAsset',
  ): TypedContractMethod<[], [string], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'migrate',
  ): TypedContractMethod<
    [sourceAsset: AddressLike, quantityInAssetUnits: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'nativeConverter',
  ): TypedContractMethod<[], [string], 'view'>;

  filters: {};
}
