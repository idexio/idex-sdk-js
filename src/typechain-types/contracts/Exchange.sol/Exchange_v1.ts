/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export type OverridableMarketFieldsStruct = {
  initialMarginFraction: BigNumberish;
  maintenanceMarginFraction: BigNumberish;
  incrementalInitialMarginFraction: BigNumberish;
  baselinePositionSize: BigNumberish;
  incrementalPositionSize: BigNumberish;
  maximumPositionSize: BigNumberish;
  minimumPositionSize: BigNumberish;
};

export type OverridableMarketFieldsStructOutput = [
  initialMarginFraction: bigint,
  maintenanceMarginFraction: bigint,
  incrementalInitialMarginFraction: bigint,
  baselinePositionSize: bigint,
  incrementalPositionSize: bigint,
  maximumPositionSize: bigint,
  minimumPositionSize: bigint,
] & {
  initialMarginFraction: bigint;
  maintenanceMarginFraction: bigint;
  incrementalInitialMarginFraction: bigint;
  baselinePositionSize: bigint;
  incrementalPositionSize: bigint;
  maximumPositionSize: bigint;
  minimumPositionSize: bigint;
};

export type MarketStruct = {
  exists: boolean;
  isActive: boolean;
  baseAssetSymbol: string;
  indexPriceAtDeactivation: BigNumberish;
  lastIndexPrice: BigNumberish;
  lastIndexPriceTimestampInMs: BigNumberish;
  overridableFields: OverridableMarketFieldsStruct;
};

export type MarketStructOutput = [
  exists: boolean,
  isActive: boolean,
  baseAssetSymbol: string,
  indexPriceAtDeactivation: bigint,
  lastIndexPrice: bigint,
  lastIndexPriceTimestampInMs: bigint,
  overridableFields: OverridableMarketFieldsStructOutput,
] & {
  exists: boolean;
  isActive: boolean;
  baseAssetSymbol: string;
  indexPriceAtDeactivation: bigint;
  lastIndexPrice: bigint;
  lastIndexPriceTimestampInMs: bigint;
  overridableFields: OverridableMarketFieldsStructOutput;
};

export type AcquisitionDeleverageArgumentsStruct = {
  baseAssetSymbol: string;
  counterpartyWallet: AddressLike;
  liquidatingWallet: AddressLike;
  liquidationBaseQuantity: BigNumberish;
  liquidationQuoteQuantity: BigNumberish;
};

export type AcquisitionDeleverageArgumentsStructOutput = [
  baseAssetSymbol: string,
  counterpartyWallet: string,
  liquidatingWallet: string,
  liquidationBaseQuantity: bigint,
  liquidationQuoteQuantity: bigint,
] & {
  baseAssetSymbol: string;
  counterpartyWallet: string;
  liquidatingWallet: string;
  liquidationBaseQuantity: bigint;
  liquidationQuoteQuantity: bigint;
};

export type ClosureDeleverageArgumentsStruct = {
  baseAssetSymbol: string;
  counterpartyWallet: AddressLike;
  liquidatingWallet: AddressLike;
  liquidationBaseQuantity: BigNumberish;
  liquidationQuoteQuantity: BigNumberish;
};

export type ClosureDeleverageArgumentsStructOutput = [
  baseAssetSymbol: string,
  counterpartyWallet: string,
  liquidatingWallet: string,
  liquidationBaseQuantity: bigint,
  liquidationQuoteQuantity: bigint,
] & {
  baseAssetSymbol: string;
  counterpartyWallet: string;
  liquidatingWallet: string;
  liquidationBaseQuantity: bigint;
  liquidationQuoteQuantity: bigint;
};

export type TradeStruct = {
  baseAssetSymbol: string;
  baseQuantity: BigNumberish;
  quoteQuantity: BigNumberish;
  makerFeeQuantity: BigNumberish;
  takerFeeQuantity: BigNumberish;
  price: BigNumberish;
  makerSide: BigNumberish;
};

export type TradeStructOutput = [
  baseAssetSymbol: string,
  baseQuantity: bigint,
  quoteQuantity: bigint,
  makerFeeQuantity: bigint,
  takerFeeQuantity: bigint,
  price: bigint,
  makerSide: bigint,
] & {
  baseAssetSymbol: string;
  baseQuantity: bigint;
  quoteQuantity: bigint;
  makerFeeQuantity: bigint;
  takerFeeQuantity: bigint;
  price: bigint;
  makerSide: bigint;
};

export type DelegatedKeyAuthorizationStruct = {
  nonce: BigNumberish;
  delegatedPublicKey: AddressLike;
  signature: BytesLike;
};

export type DelegatedKeyAuthorizationStructOutput = [
  nonce: bigint,
  delegatedPublicKey: string,
  signature: string,
] & { nonce: bigint; delegatedPublicKey: string; signature: string };

export type OrderStruct = {
  nonce: BigNumberish;
  wallet: AddressLike;
  orderType: BigNumberish;
  side: BigNumberish;
  quantity: BigNumberish;
  limitPrice: BigNumberish;
  triggerPrice: BigNumberish;
  triggerType: BigNumberish;
  callbackRate: BigNumberish;
  conditionalOrderId: BigNumberish;
  isReduceOnly: boolean;
  timeInForce: BigNumberish;
  selfTradePrevention: BigNumberish;
  isLiquidationAcquisitionOnly: boolean;
  isSignedByDelegatedKey: boolean;
  delegatedKeyAuthorization: DelegatedKeyAuthorizationStruct;
  clientOrderId: string;
  walletSignature: BytesLike;
};

export type OrderStructOutput = [
  nonce: bigint,
  wallet: string,
  orderType: bigint,
  side: bigint,
  quantity: bigint,
  limitPrice: bigint,
  triggerPrice: bigint,
  triggerType: bigint,
  callbackRate: bigint,
  conditionalOrderId: bigint,
  isReduceOnly: boolean,
  timeInForce: bigint,
  selfTradePrevention: bigint,
  isLiquidationAcquisitionOnly: boolean,
  isSignedByDelegatedKey: boolean,
  delegatedKeyAuthorization: DelegatedKeyAuthorizationStructOutput,
  clientOrderId: string,
  walletSignature: string,
] & {
  nonce: bigint;
  wallet: string;
  orderType: bigint;
  side: bigint;
  quantity: bigint;
  limitPrice: bigint;
  triggerPrice: bigint;
  triggerType: bigint;
  callbackRate: bigint;
  conditionalOrderId: bigint;
  isReduceOnly: boolean;
  timeInForce: bigint;
  selfTradePrevention: bigint;
  isLiquidationAcquisitionOnly: boolean;
  isSignedByDelegatedKey: boolean;
  delegatedKeyAuthorization: DelegatedKeyAuthorizationStructOutput;
  clientOrderId: string;
  walletSignature: string;
};

export type ExecuteTradeArgumentsStruct = {
  trade: TradeStruct;
  buy: OrderStruct;
  sell: OrderStruct;
};

export type ExecuteTradeArgumentsStructOutput = [
  trade: TradeStructOutput,
  buy: OrderStructOutput,
  sell: OrderStructOutput,
] & {
  trade: TradeStructOutput;
  buy: OrderStructOutput;
  sell: OrderStructOutput;
};

export type PositionBelowMinimumLiquidationArgumentsStruct = {
  baseAssetSymbol: string;
  liquidatingWallet: AddressLike;
  liquidationQuoteQuantity: BigNumberish;
};

export type PositionBelowMinimumLiquidationArgumentsStructOutput = [
  baseAssetSymbol: string,
  liquidatingWallet: string,
  liquidationQuoteQuantity: bigint,
] & {
  baseAssetSymbol: string;
  liquidatingWallet: string;
  liquidationQuoteQuantity: bigint;
};

export type PositionInDeactivatedMarketLiquidationArgumentsStruct = {
  baseAssetSymbol: string;
  feeQuantity: BigNumberish;
  liquidatingWallet: AddressLike;
  liquidationQuoteQuantity: BigNumberish;
};

export type PositionInDeactivatedMarketLiquidationArgumentsStructOutput = [
  baseAssetSymbol: string,
  feeQuantity: bigint,
  liquidatingWallet: string,
  liquidationQuoteQuantity: bigint,
] & {
  baseAssetSymbol: string;
  feeQuantity: bigint;
  liquidatingWallet: string;
  liquidationQuoteQuantity: bigint;
};

export type WalletLiquidationArgumentsStruct = {
  counterpartyWallet: AddressLike;
  liquidatingWallet: AddressLike;
  liquidationQuoteQuantities: BigNumberish[];
};

export type WalletLiquidationArgumentsStructOutput = [
  counterpartyWallet: string,
  liquidatingWallet: string,
  liquidationQuoteQuantities: bigint[],
] & {
  counterpartyWallet: string;
  liquidatingWallet: string;
  liquidationQuoteQuantities: bigint[];
};

export type BalanceStruct = {
  isMigrated: boolean;
  balance: BigNumberish;
  costBasis: BigNumberish;
  lastUpdateTimestampInMs: BigNumberish;
};

export type BalanceStructOutput = [
  isMigrated: boolean,
  balance: bigint,
  costBasis: bigint,
  lastUpdateTimestampInMs: bigint,
] & {
  isMigrated: boolean;
  balance: bigint;
  costBasis: bigint;
  lastUpdateTimestampInMs: bigint;
};

export type NonceInvalidationStruct = {
  timestampInMs: BigNumberish;
  effectiveBlockTimestamp: BigNumberish;
};

export type NonceInvalidationStructOutput = [
  timestampInMs: bigint,
  effectiveBlockTimestamp: bigint,
] & { timestampInMs: bigint; effectiveBlockTimestamp: bigint };

export type IndexPricePayloadStruct = {
  indexPriceAdapter: AddressLike;
  payload: BytesLike;
};

export type IndexPricePayloadStructOutput = [
  indexPriceAdapter: string,
  payload: string,
] & { indexPriceAdapter: string; payload: string };

export type TransferStruct = {
  nonce: BigNumberish;
  sourceWallet: AddressLike;
  destinationWallet: AddressLike;
  grossQuantity: BigNumberish;
  gasFee: BigNumberish;
  walletSignature: BytesLike;
};

export type TransferStructOutput = [
  nonce: bigint,
  sourceWallet: string,
  destinationWallet: string,
  grossQuantity: bigint,
  gasFee: bigint,
  walletSignature: string,
] & {
  nonce: bigint;
  sourceWallet: string;
  destinationWallet: string;
  grossQuantity: bigint;
  gasFee: bigint;
  walletSignature: string;
};

export type WithdrawalStruct = {
  nonce: BigNumberish;
  wallet: AddressLike;
  grossQuantity: BigNumberish;
  maximumGasFee: BigNumberish;
  bridgeAdapter: AddressLike;
  bridgeAdapterPayload: BytesLike;
  gasFee: BigNumberish;
  walletSignature: BytesLike;
};

export type WithdrawalStructOutput = [
  nonce: bigint,
  wallet: string,
  grossQuantity: bigint,
  maximumGasFee: bigint,
  bridgeAdapter: string,
  bridgeAdapterPayload: string,
  gasFee: bigint,
  walletSignature: string,
] & {
  nonce: bigint;
  wallet: string;
  grossQuantity: bigint;
  maximumGasFee: bigint;
  bridgeAdapter: string;
  bridgeAdapterPayload: string;
  gasFee: bigint;
  walletSignature: string;
};

export interface Exchange_v1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'activateMarket'
      | 'addMarket'
      | 'adminWallet'
      | 'applyOutstandingWalletFundingForMarket'
      | 'applyPendingDepositsForWallet'
      | 'baseAssetSymbolsWithOpenPositionsByWallet'
      | 'bridgeAdapters'
      | 'chainPropagationPeriodInS'
      | 'clearWalletExit'
      | 'custodian'
      | 'deactivateMarket'
      | 'delegateKeyExpirationPeriodInMs'
      | 'deleverageExitAcquisition'
      | 'deleverageExitFundClosure'
      | 'deleverageInMaintenanceAcquisition'
      | 'deleverageInsuranceFundClosure'
      | 'deposit'
      | 'depositIndex'
      | 'dispatcherWallet'
      | 'executeTrade'
      | 'exitFundPositionOpenedAtBlockTimestamp'
      | 'exitFundWallet'
      | 'exitWallet'
      | 'feeWallet'
      | 'fundingMultipliersByBaseAssetSymbol'
      | 'indexPriceAdapters'
      | 'insuranceFundWallet'
      | 'invalidateNonce'
      | 'isDepositEnabled'
      | 'lastFundingRatePublishTimestampInMsByBaseAssetSymbol'
      | 'liquidatePositionBelowMinimum'
      | 'liquidatePositionInDeactivatedMarket'
      | 'liquidateWalletExit'
      | 'liquidateWalletInMaintenance'
      | 'liquidateWalletInMaintenanceDuringSystemRecovery'
      | 'loadBalanceBySymbol'
      | 'loadBalanceStructBySymbol'
      | 'loadBaseAssetSymbolsWithOpenPositionsByWallet'
      | 'loadLastNonceInvalidationForWallet'
      | 'loadMarket'
      | 'loadMarketsLength'
      | 'loadOutstandingWalletFunding'
      | 'loadQuoteQuantityAvailableForExitWithdrawal'
      | 'loadTotalAccountValueFromIndexPrices'
      | 'loadTotalAccountValueFromOraclePrices'
      | 'loadTotalInitialMarginRequirementFromIndexPrices'
      | 'loadTotalInitialMarginRequirementFromOraclePrices'
      | 'loadTotalMaintenanceMarginRequirementFromIndexPrices'
      | 'loadTotalMaintenanceMarginRequirementFromOraclePrices'
      | 'marketBaseAssetSymbols'
      | 'marketOverridesByBaseAssetSymbolAndWallet'
      | 'migrateQuoteTokenAddress'
      | 'nonceInvalidationsByWallet'
      | 'oraclePriceAdapter'
      | 'ownerWallet'
      | 'pendingDepositQuantityByWallet'
      | 'positionBelowMinimumLiquidationPriceToleranceMultiplier'
      | 'publishFundingMultiplier'
      | 'publishIndexPrices'
      | 'quoteTokenAddress'
      | 'removeAdmin'
      | 'removeDispatcher'
      | 'removeOwner'
      | 'setAdmin'
      | 'setBridgeAdapters'
      | 'setChainPropagationPeriod'
      | 'setCustodian'
      | 'setDelegateKeyExpirationPeriod'
      | 'setDepositEnabled'
      | 'setDepositIndex'
      | 'setDispatcher'
      | 'setExitFundWallet'
      | 'setFeeWallet'
      | 'setIndexPriceAdapters'
      | 'setInsuranceFundWallet'
      | 'setMarketOverrides'
      | 'setOraclePriceAdapter'
      | 'setOwner'
      | 'setPositionBelowMinimumLiquidationPriceToleranceMultiplier'
      | 'skim'
      | 'transfer'
      | 'unsetMarketOverridesForWallet'
      | 'walletExits'
      | 'withdraw'
      | 'withdrawExit'
      | 'withdrawExitAdmin',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ChainPropagationPeriodChanged'
      | 'DelegateKeyExpirationPeriodChanged'
      | 'DeleveragedExitAcquisition'
      | 'DeleveragedExitFundClosure'
      | 'DeleveragedInMaintenanceAcquisition'
      | 'DeleveragedInsuranceFundClosure'
      | 'Deposited'
      | 'DepositsDisabled'
      | 'DepositsEnabled'
      | 'DispatcherChanged'
      | 'ExitFundWalletChanged'
      | 'FeeWalletChanged'
      | 'FundingRatePublished'
      | 'IndexPricePublished'
      | 'LiquidatedPositionBelowMinimum'
      | 'LiquidatedPositionInDeactivatedMarket'
      | 'LiquidatedWalletExit'
      | 'LiquidatedWalletInMaintenance'
      | 'LiquidatedWalletInMaintenanceDuringSystemRecovery'
      | 'LiquidationAcquisitionExecuted'
      | 'MarketActivated'
      | 'MarketAdded'
      | 'MarketDeactivated'
      | 'MarketOverridesUnset'
      | 'OrderNonceInvalidated'
      | 'PendingDepositApplied'
      | 'PositionBelowMinimumLiquidationPriceToleranceMultiplierChanged'
      | 'QuoteTokenAddressChanged'
      | 'TradeExecuted'
      | 'Transferred'
      | 'WalletExitCleared'
      | 'WalletExitWithdrawn'
      | 'WalletExited'
      | 'Withdrawn',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'activateMarket',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'addMarket',
    values: [MarketStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'adminWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'applyOutstandingWalletFundingForMarket',
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'applyPendingDepositsForWallet',
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'baseAssetSymbolsWithOpenPositionsByWallet',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'bridgeAdapters',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'chainPropagationPeriodInS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'clearWalletExit',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'custodian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deactivateMarket',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegateKeyExpirationPeriodInMs',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deleverageExitAcquisition',
    values: [AcquisitionDeleverageArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'deleverageExitFundClosure',
    values: [ClosureDeleverageArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'deleverageInMaintenanceAcquisition',
    values: [AcquisitionDeleverageArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'deleverageInsuranceFundClosure',
    values: [ClosureDeleverageArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositIndex',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatcherWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'executeTrade',
    values: [ExecuteTradeArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'exitFundPositionOpenedAtBlockTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exitFundWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exitWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'feeWallet', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fundingMultipliersByBaseAssetSymbol',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'indexPriceAdapters',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'insuranceFundWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'invalidateNonce',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isDepositEnabled',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastFundingRatePublishTimestampInMsByBaseAssetSymbol',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidatePositionBelowMinimum',
    values: [PositionBelowMinimumLiquidationArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidatePositionInDeactivatedMarket',
    values: [PositionInDeactivatedMarketLiquidationArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateWalletExit',
    values: [WalletLiquidationArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateWalletInMaintenance',
    values: [WalletLiquidationArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateWalletInMaintenanceDuringSystemRecovery',
    values: [WalletLiquidationArgumentsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadBalanceBySymbol',
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadBalanceStructBySymbol',
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadBaseAssetSymbolsWithOpenPositionsByWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadLastNonceInvalidationForWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadMarket',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadMarketsLength',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loadOutstandingWalletFunding',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadQuoteQuantityAvailableForExitWithdrawal',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalAccountValueFromIndexPrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalAccountValueFromOraclePrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalInitialMarginRequirementFromIndexPrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalInitialMarginRequirementFromOraclePrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalMaintenanceMarginRequirementFromIndexPrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadTotalMaintenanceMarginRequirementFromOraclePrices',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'marketBaseAssetSymbols',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'marketOverridesByBaseAssetSymbolAndWallet',
    values: [string, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateQuoteTokenAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nonceInvalidationsByWallet',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'oraclePriceAdapter',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'ownerWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'pendingDepositQuantityByWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'positionBelowMinimumLiquidationPriceToleranceMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'publishFundingMultiplier',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'publishIndexPrices',
    values: [IndexPricePayloadStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteTokenAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeDispatcher',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdmin',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBridgeAdapters',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setChainPropagationPeriod',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCustodian',
    values: [AddressLike, AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDelegateKeyExpirationPeriod',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositEnabled',
    values: [boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositIndex',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setDispatcher',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setExitFundWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIndexPriceAdapters',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInsuranceFundWallet',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMarketOverrides',
    values: [string, OverridableMarketFieldsStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOraclePriceAdapter',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOwner',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPositionBelowMinimumLiquidationPriceToleranceMultiplier',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'skim', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [TransferStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'unsetMarketOverridesForWallet',
    values: [string, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'walletExits',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [WithdrawalStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawExit',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawExitAdmin',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateMarket',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'adminWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'applyOutstandingWalletFundingForMarket',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'applyPendingDepositsForWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseAssetSymbolsWithOpenPositionsByWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bridgeAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'chainPropagationPeriodInS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clearWalletExit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'custodian', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deactivateMarket',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'delegateKeyExpirationPeriodInMs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleverageExitAcquisition',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleverageExitFundClosure',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleverageInMaintenanceAcquisition',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deleverageInsuranceFundClosure',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dispatcherWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeTrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exitFundPositionOpenedAtBlockTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exitFundWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'exitWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeWallet', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fundingMultipliersByBaseAssetSymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'indexPriceAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'insuranceFundWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'invalidateNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isDepositEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastFundingRatePublishTimestampInMsByBaseAssetSymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidatePositionBelowMinimum',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidatePositionInDeactivatedMarket',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateWalletExit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateWalletInMaintenance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateWalletInMaintenanceDuringSystemRecovery',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadBalanceBySymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadBalanceStructBySymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadBaseAssetSymbolsWithOpenPositionsByWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadLastNonceInvalidationForWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'loadMarket', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'loadMarketsLength',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadOutstandingWalletFunding',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadQuoteQuantityAvailableForExitWithdrawal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalAccountValueFromIndexPrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalAccountValueFromOraclePrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalInitialMarginRequirementFromIndexPrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalInitialMarginRequirementFromOraclePrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalMaintenanceMarginRequirementFromIndexPrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadTotalMaintenanceMarginRequirementFromOraclePrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'marketBaseAssetSymbols',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'marketOverridesByBaseAssetSymbolAndWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'migrateQuoteTokenAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nonceInvalidationsByWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'oraclePriceAdapter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ownerWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'pendingDepositQuantityByWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'positionBelowMinimumLiquidationPriceToleranceMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'publishFundingMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'publishIndexPrices',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteTokenAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeDispatcher',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setBridgeAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setChainPropagationPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setCustodian',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDelegateKeyExpirationPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDispatcher',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setExitFundWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIndexPriceAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInsuranceFundWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMarketOverrides',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setOraclePriceAdapter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setPositionBelowMinimumLiquidationPriceToleranceMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'skim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unsetMarketOverridesForWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'walletExits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawExit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawExitAdmin',
    data: BytesLike,
  ): Result;
}

export namespace ChainPropagationPeriodChangedEvent {
  export type InputTuple = [
    previousValue: BigNumberish,
    newValue: BigNumberish,
  ];
  export type OutputTuple = [previousValue: bigint, newValue: bigint];
  export interface OutputObject {
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateKeyExpirationPeriodChangedEvent {
  export type InputTuple = [
    previousValue: BigNumberish,
    newValue: BigNumberish,
  ];
  export type OutputTuple = [previousValue: bigint, newValue: bigint];
  export interface OutputObject {
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleveragedExitAcquisitionEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: AddressLike,
    liquidatingWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: string,
    liquidatingWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    counterpartyWallet: string;
    liquidatingWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleveragedExitFundClosureEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: AddressLike,
    exitFundWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: string,
    exitFundWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    counterpartyWallet: string;
    exitFundWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleveragedInMaintenanceAcquisitionEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: AddressLike,
    liquidatingWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: string,
    liquidatingWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    counterpartyWallet: string;
    liquidatingWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleveragedInsuranceFundClosureEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: AddressLike,
    insuranceFundWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    counterpartyWallet: string,
    insuranceFundWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    counterpartyWallet: string;
    insuranceFundWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    index: BigNumberish,
    sourceWallet: AddressLike,
    destinationWallet: AddressLike,
    quantity: BigNumberish,
  ];
  export type OutputTuple = [
    index: bigint,
    sourceWallet: string,
    destinationWallet: string,
    quantity: bigint,
  ];
  export interface OutputObject {
    index: bigint;
    sourceWallet: string;
    destinationWallet: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DispatcherChangedEvent {
  export type InputTuple = [previousValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [previousValue: string, newValue: string];
  export interface OutputObject {
    previousValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitFundWalletChangedEvent {
  export type InputTuple = [previousValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [previousValue: string, newValue: string];
  export interface OutputObject {
    previousValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWalletChangedEvent {
  export type InputTuple = [previousValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [previousValue: string, newValue: string];
  export interface OutputObject {
    previousValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingRatePublishedEvent {
  export type InputTuple = [baseAssetSymbol: string, fundingRate: BigNumberish];
  export type OutputTuple = [baseAssetSymbol: string, fundingRate: bigint];
  export interface OutputObject {
    baseAssetSymbol: string;
    fundingRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexPricePublishedEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    timestampInMs: BigNumberish,
    price: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    timestampInMs: bigint,
    price: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    timestampInMs: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedPositionBelowMinimumEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    liquidatingWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    liquidatingWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    liquidatingWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedPositionInDeactivatedMarketEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    liquidatingWallet: AddressLike,
    liquidationBaseQuantity: BigNumberish,
    liquidationQuoteQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    liquidatingWallet: string,
    liquidationBaseQuantity: bigint,
    liquidationQuoteQuantity: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    liquidatingWallet: string;
    liquidationBaseQuantity: bigint;
    liquidationQuoteQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedWalletExitEvent {
  export type InputTuple = [liquidatingWallet: AddressLike];
  export type OutputTuple = [liquidatingWallet: string];
  export interface OutputObject {
    liquidatingWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedWalletInMaintenanceEvent {
  export type InputTuple = [liquidatingWallet: AddressLike];
  export type OutputTuple = [liquidatingWallet: string];
  export interface OutputObject {
    liquidatingWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent {
  export type InputTuple = [liquidatingWallet: AddressLike];
  export type OutputTuple = [liquidatingWallet: string];
  export interface OutputObject {
    liquidatingWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationAcquisitionExecutedEvent {
  export type InputTuple = [
    buyWallet: AddressLike,
    sellWallet: AddressLike,
    baseAssetSymbol: string,
    quoteAssetSymbol: string,
    baseQuantity: BigNumberish,
    quoteQuantity: BigNumberish,
    makerSide: BigNumberish,
    makerFeeQuantity: BigNumberish,
    takerFeeQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    buyWallet: string,
    sellWallet: string,
    baseAssetSymbol: string,
    quoteAssetSymbol: string,
    baseQuantity: bigint,
    quoteQuantity: bigint,
    makerSide: bigint,
    makerFeeQuantity: bigint,
    takerFeeQuantity: bigint,
  ];
  export interface OutputObject {
    buyWallet: string;
    sellWallet: string;
    baseAssetSymbol: string;
    quoteAssetSymbol: string;
    baseQuantity: bigint;
    quoteQuantity: bigint;
    makerSide: bigint;
    makerFeeQuantity: bigint;
    takerFeeQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketActivatedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketAddedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketDeactivatedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOverridesUnsetEvent {
  export type InputTuple = [baseAssetSymbol: string, wallet: AddressLike];
  export type OutputTuple = [baseAssetSymbol: string, wallet: string];
  export interface OutputObject {
    baseAssetSymbol: string;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderNonceInvalidatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    nonce: BigNumberish,
    timestampInMs: BigNumberish,
    effectiveBlockTimestamp: BigNumberish,
  ];
  export type OutputTuple = [
    wallet: string,
    nonce: bigint,
    timestampInMs: bigint,
    effectiveBlockTimestamp: bigint,
  ];
  export interface OutputObject {
    wallet: string;
    nonce: bigint;
    timestampInMs: bigint;
    effectiveBlockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingDepositAppliedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    quantity: BigNumberish,
    newExchangeBalance: BigNumberish,
  ];
  export type OutputTuple = [
    wallet: string,
    quantity: bigint,
    newExchangeBalance: bigint,
  ];
  export interface OutputObject {
    wallet: string;
    quantity: bigint;
    newExchangeBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent {
  export type InputTuple = [
    previousValue: BigNumberish,
    newValue: BigNumberish,
  ];
  export type OutputTuple = [previousValue: bigint, newValue: bigint];
  export interface OutputObject {
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteTokenAddressChangedEvent {
  export type InputTuple = [previousValue: AddressLike, newValue: AddressLike];
  export type OutputTuple = [previousValue: string, newValue: string];
  export interface OutputObject {
    previousValue: string;
    newValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    buyWallet: AddressLike,
    sellWallet: AddressLike,
    baseAssetSymbol: string,
    quoteAssetSymbol: string,
    baseQuantity: BigNumberish,
    quoteQuantity: BigNumberish,
    makerSide: BigNumberish,
    makerFeeQuantity: BigNumberish,
    takerFeeQuantity: BigNumberish,
  ];
  export type OutputTuple = [
    buyWallet: string,
    sellWallet: string,
    baseAssetSymbol: string,
    quoteAssetSymbol: string,
    baseQuantity: bigint,
    quoteQuantity: bigint,
    makerSide: bigint,
    makerFeeQuantity: bigint,
    takerFeeQuantity: bigint,
  ];
  export interface OutputObject {
    buyWallet: string;
    sellWallet: string;
    baseAssetSymbol: string;
    quoteAssetSymbol: string;
    baseQuantity: bigint;
    quoteQuantity: bigint;
    makerSide: bigint;
    makerFeeQuantity: bigint;
    takerFeeQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferredEvent {
  export type InputTuple = [
    destinationWallet: AddressLike,
    sourceWallet: AddressLike,
    quantity: BigNumberish,
    newDestinationWalletExchangeBalance: BigNumberish,
    newSourceWalletExchangeBalance: BigNumberish,
  ];
  export type OutputTuple = [
    destinationWallet: string,
    sourceWallet: string,
    quantity: bigint,
    newDestinationWalletExchangeBalance: bigint,
    newSourceWalletExchangeBalance: bigint,
  ];
  export interface OutputObject {
    destinationWallet: string;
    sourceWallet: string;
    quantity: bigint;
    newDestinationWalletExchangeBalance: bigint;
    newSourceWalletExchangeBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletExitClearedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletExitWithdrawnEvent {
  export type InputTuple = [wallet: AddressLike, quantity: BigNumberish];
  export type OutputTuple = [wallet: string, quantity: bigint];
  export interface OutputObject {
    wallet: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletExitedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    effectiveBlockTimestamp: BigNumberish,
  ];
  export type OutputTuple = [wallet: string, effectiveBlockTimestamp: bigint];
  export interface OutputObject {
    wallet: string;
    effectiveBlockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    wallet: AddressLike,
    quantity: BigNumberish,
    newExchangeBalance: BigNumberish,
  ];
  export type OutputTuple = [
    wallet: string,
    quantity: bigint,
    newExchangeBalance: bigint,
  ];
  export interface OutputObject {
    wallet: string;
    quantity: bigint;
    newExchangeBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Exchange_v1 extends BaseContract {
  connect(runner?: ContractRunner | null): Exchange_v1;
  waitForDeployment(): Promise<this>;

  interface: Exchange_v1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  activateMarket: TypedContractMethod<
    [baseAssetSymbol: string],
    [void],
    'nonpayable'
  >;

  addMarket: TypedContractMethod<
    [newMarket: MarketStruct],
    [void],
    'nonpayable'
  >;

  adminWallet: TypedContractMethod<[], [string], 'view'>;

  applyOutstandingWalletFundingForMarket: TypedContractMethod<
    [wallet: AddressLike, baseAssetSymbol: string],
    [void],
    'nonpayable'
  >;

  applyPendingDepositsForWallet: TypedContractMethod<
    [quantity: BigNumberish, wallet: AddressLike],
    [void],
    'nonpayable'
  >;

  baseAssetSymbolsWithOpenPositionsByWallet: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    'view'
  >;

  bridgeAdapters: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  chainPropagationPeriodInS: TypedContractMethod<[], [bigint], 'view'>;

  clearWalletExit: TypedContractMethod<[], [void], 'nonpayable'>;

  custodian: TypedContractMethod<[], [string], 'view'>;

  deactivateMarket: TypedContractMethod<
    [baseAssetSymbol: string],
    [void],
    'nonpayable'
  >;

  delegateKeyExpirationPeriodInMs: TypedContractMethod<[], [bigint], 'view'>;

  deleverageExitAcquisition: TypedContractMethod<
    [deleverageArguments: AcquisitionDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;

  deleverageExitFundClosure: TypedContractMethod<
    [deleverageArguments: ClosureDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;

  deleverageInMaintenanceAcquisition: TypedContractMethod<
    [deleverageArguments: AcquisitionDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;

  deleverageInsuranceFundClosure: TypedContractMethod<
    [deleverageArguments: ClosureDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [quantityInAssetUnits: BigNumberish, destinationWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  depositIndex: TypedContractMethod<[], [bigint], 'view'>;

  dispatcherWallet: TypedContractMethod<[], [string], 'view'>;

  executeTrade: TypedContractMethod<
    [tradeArguments: ExecuteTradeArgumentsStruct],
    [void],
    'nonpayable'
  >;

  exitFundPositionOpenedAtBlockTimestamp: TypedContractMethod<
    [],
    [bigint],
    'view'
  >;

  exitFundWallet: TypedContractMethod<[], [string], 'view'>;

  exitWallet: TypedContractMethod<[], [void], 'nonpayable'>;

  feeWallet: TypedContractMethod<[], [string], 'view'>;

  fundingMultipliersByBaseAssetSymbol: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        fundingMultiplier0: bigint;
        fundingMultiplier1: bigint;
        fundingMultiplier2: bigint;
        fundingMultiplier3: bigint;
      },
    ],
    'view'
  >;

  indexPriceAdapters: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    'view'
  >;

  insuranceFundWallet: TypedContractMethod<[], [string], 'view'>;

  invalidateNonce: TypedContractMethod<
    [nonce: BigNumberish],
    [void],
    'nonpayable'
  >;

  isDepositEnabled: TypedContractMethod<[], [boolean], 'view'>;

  lastFundingRatePublishTimestampInMsByBaseAssetSymbol: TypedContractMethod<
    [arg0: string],
    [bigint],
    'view'
  >;

  liquidatePositionBelowMinimum: TypedContractMethod<
    [liquidationArguments: PositionBelowMinimumLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;

  liquidatePositionInDeactivatedMarket: TypedContractMethod<
    [
      liquidationArguments: PositionInDeactivatedMarketLiquidationArgumentsStruct,
    ],
    [void],
    'nonpayable'
  >;

  liquidateWalletExit: TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;

  liquidateWalletInMaintenance: TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;

  liquidateWalletInMaintenanceDuringSystemRecovery: TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;

  loadBalanceBySymbol: TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [bigint],
    'view'
  >;

  loadBalanceStructBySymbol: TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [BalanceStructOutput],
    'view'
  >;

  loadBaseAssetSymbolsWithOpenPositionsByWallet: TypedContractMethod<
    [wallet: AddressLike],
    [string[]],
    'view'
  >;

  loadLastNonceInvalidationForWallet: TypedContractMethod<
    [wallet: AddressLike],
    [NonceInvalidationStructOutput],
    'view'
  >;

  loadMarket: TypedContractMethod<
    [index: BigNumberish],
    [MarketStructOutput],
    'view'
  >;

  loadMarketsLength: TypedContractMethod<[], [bigint], 'view'>;

  loadOutstandingWalletFunding: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadQuoteQuantityAvailableForExitWithdrawal: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalAccountValueFromIndexPrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalAccountValueFromOraclePrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalInitialMarginRequirementFromIndexPrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalInitialMarginRequirementFromOraclePrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalMaintenanceMarginRequirementFromIndexPrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  loadTotalMaintenanceMarginRequirementFromOraclePrices: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    'view'
  >;

  marketBaseAssetSymbols: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    'view'
  >;

  marketOverridesByBaseAssetSymbolAndWallet: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [boolean, OverridableMarketFieldsStructOutput] & {
        exists: boolean;
        overridableFields: OverridableMarketFieldsStructOutput;
      },
    ],
    'view'
  >;

  migrateQuoteTokenAddress: TypedContractMethod<[], [void], 'nonpayable'>;

  nonceInvalidationsByWallet: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint] & {
        timestampInMs: bigint;
        effectiveBlockTimestamp: bigint;
      },
    ],
    'view'
  >;

  oraclePriceAdapter: TypedContractMethod<[], [string], 'view'>;

  ownerWallet: TypedContractMethod<[], [string], 'view'>;

  pendingDepositQuantityByWallet: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    'view'
  >;

  positionBelowMinimumLiquidationPriceToleranceMultiplier: TypedContractMethod<
    [],
    [bigint],
    'view'
  >;

  publishFundingMultiplier: TypedContractMethod<
    [baseAssetSymbol: string, fundingRate: BigNumberish],
    [void],
    'nonpayable'
  >;

  publishIndexPrices: TypedContractMethod<
    [encodedIndexPrices: IndexPricePayloadStruct[]],
    [void],
    'nonpayable'
  >;

  quoteTokenAddress: TypedContractMethod<[], [string], 'view'>;

  removeAdmin: TypedContractMethod<[], [void], 'nonpayable'>;

  removeDispatcher: TypedContractMethod<[], [void], 'nonpayable'>;

  removeOwner: TypedContractMethod<[], [void], 'nonpayable'>;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;

  setBridgeAdapters: TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  setChainPropagationPeriod: TypedContractMethod<
    [newChainPropagationPeriodInS: BigNumberish],
    [void],
    'nonpayable'
  >;

  setCustodian: TypedContractMethod<
    [newCustodian: AddressLike, newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  setDelegateKeyExpirationPeriod: TypedContractMethod<
    [newDelegateKeyExpirationPeriodInMs: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDepositEnabled: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    'nonpayable'
  >;

  setDepositIndex: TypedContractMethod<[], [void], 'nonpayable'>;

  setDispatcher: TypedContractMethod<
    [newDispatcherWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  setExitFundWallet: TypedContractMethod<
    [newExitFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  setFeeWallet: TypedContractMethod<
    [newFeeWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  setIndexPriceAdapters: TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  setInsuranceFundWallet: TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  setMarketOverrides: TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;

  setOraclePriceAdapter: TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  setPositionBelowMinimumLiquidationPriceToleranceMultiplier: TypedContractMethod<
    [newPositionBelowMinimumLiquidationPriceToleranceMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;

  skim: TypedContractMethod<[tokenAddress: AddressLike], [void], 'nonpayable'>;

  transfer: TypedContractMethod<
    [transfer_: TransferStruct],
    [void],
    'nonpayable'
  >;

  unsetMarketOverridesForWallet: TypedContractMethod<
    [baseAssetSymbol: string, wallet: AddressLike],
    [void],
    'nonpayable'
  >;

  walletExits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        exists: boolean;
        effectiveBlockTimestamp: bigint;
        deleveragePriceStrategy: bigint;
      },
    ],
    'view'
  >;

  withdraw: TypedContractMethod<
    [withdrawal: WithdrawalStruct],
    [void],
    'nonpayable'
  >;

  withdrawExit: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    'nonpayable'
  >;

  withdrawExitAdmin: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'activateMarket',
  ): TypedContractMethod<[baseAssetSymbol: string], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'addMarket',
  ): TypedContractMethod<[newMarket: MarketStruct], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'adminWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'applyOutstandingWalletFundingForMarket',
  ): TypedContractMethod<
    [wallet: AddressLike, baseAssetSymbol: string],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'applyPendingDepositsForWallet',
  ): TypedContractMethod<
    [quantity: BigNumberish, wallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'baseAssetSymbolsWithOpenPositionsByWallet',
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'bridgeAdapters',
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'chainPropagationPeriodInS',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'clearWalletExit',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'custodian',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'deactivateMarket',
  ): TypedContractMethod<[baseAssetSymbol: string], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'delegateKeyExpirationPeriodInMs',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'deleverageExitAcquisition',
  ): TypedContractMethod<
    [deleverageArguments: AcquisitionDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deleverageExitFundClosure',
  ): TypedContractMethod<
    [deleverageArguments: ClosureDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deleverageInMaintenanceAcquisition',
  ): TypedContractMethod<
    [deleverageArguments: AcquisitionDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deleverageInsuranceFundClosure',
  ): TypedContractMethod<
    [deleverageArguments: ClosureDeleverageArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit',
  ): TypedContractMethod<
    [quantityInAssetUnits: BigNumberish, destinationWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositIndex',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'dispatcherWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'executeTrade',
  ): TypedContractMethod<
    [tradeArguments: ExecuteTradeArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'exitFundPositionOpenedAtBlockTimestamp',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'exitFundWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'exitWallet',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'feeWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'fundingMultipliersByBaseAssetSymbol',
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        fundingMultiplier0: bigint;
        fundingMultiplier1: bigint;
        fundingMultiplier2: bigint;
        fundingMultiplier3: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'indexPriceAdapters',
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'insuranceFundWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'invalidateNonce',
  ): TypedContractMethod<[nonce: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'isDepositEnabled',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'lastFundingRatePublishTimestampInMsByBaseAssetSymbol',
  ): TypedContractMethod<[arg0: string], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'liquidatePositionBelowMinimum',
  ): TypedContractMethod<
    [liquidationArguments: PositionBelowMinimumLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'liquidatePositionInDeactivatedMarket',
  ): TypedContractMethod<
    [
      liquidationArguments: PositionInDeactivatedMarketLiquidationArgumentsStruct,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'liquidateWalletExit',
  ): TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'liquidateWalletInMaintenance',
  ): TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'liquidateWalletInMaintenanceDuringSystemRecovery',
  ): TypedContractMethod<
    [liquidationArguments: WalletLiquidationArgumentsStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'loadBalanceBySymbol',
  ): TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'loadBalanceStructBySymbol',
  ): TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [BalanceStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'loadBaseAssetSymbolsWithOpenPositionsByWallet',
  ): TypedContractMethod<[wallet: AddressLike], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'loadLastNonceInvalidationForWallet',
  ): TypedContractMethod<
    [wallet: AddressLike],
    [NonceInvalidationStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'loadMarket',
  ): TypedContractMethod<[index: BigNumberish], [MarketStructOutput], 'view'>;
  getFunction(
    nameOrSignature: 'loadMarketsLength',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadOutstandingWalletFunding',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadQuoteQuantityAvailableForExitWithdrawal',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalAccountValueFromIndexPrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalAccountValueFromOraclePrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalInitialMarginRequirementFromIndexPrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalInitialMarginRequirementFromOraclePrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalMaintenanceMarginRequirementFromIndexPrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadTotalMaintenanceMarginRequirementFromOraclePrices',
  ): TypedContractMethod<[wallet: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'marketBaseAssetSymbols',
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'marketOverridesByBaseAssetSymbolAndWallet',
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [boolean, OverridableMarketFieldsStructOutput] & {
        exists: boolean;
        overridableFields: OverridableMarketFieldsStructOutput;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'migrateQuoteTokenAddress',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'nonceInvalidationsByWallet',
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint] & {
        timestampInMs: bigint;
        effectiveBlockTimestamp: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'oraclePriceAdapter',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'ownerWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pendingDepositQuantityByWallet',
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'positionBelowMinimumLiquidationPriceToleranceMultiplier',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'publishFundingMultiplier',
  ): TypedContractMethod<
    [baseAssetSymbol: string, fundingRate: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'publishIndexPrices',
  ): TypedContractMethod<
    [encodedIndexPrices: IndexPricePayloadStruct[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'quoteTokenAddress',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeAdmin',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeDispatcher',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeOwner',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAdmin',
  ): TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setBridgeAdapters',
  ): TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setChainPropagationPeriod',
  ): TypedContractMethod<
    [newChainPropagationPeriodInS: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setCustodian',
  ): TypedContractMethod<
    [newCustodian: AddressLike, newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDelegateKeyExpirationPeriod',
  ): TypedContractMethod<
    [newDelegateKeyExpirationPeriodInMs: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDepositEnabled',
  ): TypedContractMethod<[isEnabled: boolean], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setDepositIndex',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setDispatcher',
  ): TypedContractMethod<
    [newDispatcherWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setExitFundWallet',
  ): TypedContractMethod<
    [newExitFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setFeeWallet',
  ): TypedContractMethod<[newFeeWallet: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setIndexPriceAdapters',
  ): TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setInsuranceFundWallet',
  ): TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setMarketOverrides',
  ): TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setOraclePriceAdapter',
  ): TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setOwner',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setPositionBelowMinimumLiquidationPriceToleranceMultiplier',
  ): TypedContractMethod<
    [newPositionBelowMinimumLiquidationPriceToleranceMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'skim',
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transfer',
  ): TypedContractMethod<[transfer_: TransferStruct], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unsetMarketOverridesForWallet',
  ): TypedContractMethod<
    [baseAssetSymbol: string, wallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'walletExits'): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        exists: boolean;
        effectiveBlockTimestamp: bigint;
        deleveragePriceStrategy: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'withdraw',
  ): TypedContractMethod<[withdrawal: WithdrawalStruct], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdrawExit',
  ): TypedContractMethod<[wallet: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdrawExitAdmin',
  ): TypedContractMethod<[wallet: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'ChainPropagationPeriodChanged',
  ): TypedContractEvent<
    ChainPropagationPeriodChangedEvent.InputTuple,
    ChainPropagationPeriodChangedEvent.OutputTuple,
    ChainPropagationPeriodChangedEvent.OutputObject
  >;
  getEvent(
    key: 'DelegateKeyExpirationPeriodChanged',
  ): TypedContractEvent<
    DelegateKeyExpirationPeriodChangedEvent.InputTuple,
    DelegateKeyExpirationPeriodChangedEvent.OutputTuple,
    DelegateKeyExpirationPeriodChangedEvent.OutputObject
  >;
  getEvent(
    key: 'DeleveragedExitAcquisition',
  ): TypedContractEvent<
    DeleveragedExitAcquisitionEvent.InputTuple,
    DeleveragedExitAcquisitionEvent.OutputTuple,
    DeleveragedExitAcquisitionEvent.OutputObject
  >;
  getEvent(
    key: 'DeleveragedExitFundClosure',
  ): TypedContractEvent<
    DeleveragedExitFundClosureEvent.InputTuple,
    DeleveragedExitFundClosureEvent.OutputTuple,
    DeleveragedExitFundClosureEvent.OutputObject
  >;
  getEvent(
    key: 'DeleveragedInMaintenanceAcquisition',
  ): TypedContractEvent<
    DeleveragedInMaintenanceAcquisitionEvent.InputTuple,
    DeleveragedInMaintenanceAcquisitionEvent.OutputTuple,
    DeleveragedInMaintenanceAcquisitionEvent.OutputObject
  >;
  getEvent(
    key: 'DeleveragedInsuranceFundClosure',
  ): TypedContractEvent<
    DeleveragedInsuranceFundClosureEvent.InputTuple,
    DeleveragedInsuranceFundClosureEvent.OutputTuple,
    DeleveragedInsuranceFundClosureEvent.OutputObject
  >;
  getEvent(
    key: 'Deposited',
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: 'DepositsDisabled',
  ): TypedContractEvent<
    DepositsDisabledEvent.InputTuple,
    DepositsDisabledEvent.OutputTuple,
    DepositsDisabledEvent.OutputObject
  >;
  getEvent(
    key: 'DepositsEnabled',
  ): TypedContractEvent<
    DepositsEnabledEvent.InputTuple,
    DepositsEnabledEvent.OutputTuple,
    DepositsEnabledEvent.OutputObject
  >;
  getEvent(
    key: 'DispatcherChanged',
  ): TypedContractEvent<
    DispatcherChangedEvent.InputTuple,
    DispatcherChangedEvent.OutputTuple,
    DispatcherChangedEvent.OutputObject
  >;
  getEvent(
    key: 'ExitFundWalletChanged',
  ): TypedContractEvent<
    ExitFundWalletChangedEvent.InputTuple,
    ExitFundWalletChangedEvent.OutputTuple,
    ExitFundWalletChangedEvent.OutputObject
  >;
  getEvent(
    key: 'FeeWalletChanged',
  ): TypedContractEvent<
    FeeWalletChangedEvent.InputTuple,
    FeeWalletChangedEvent.OutputTuple,
    FeeWalletChangedEvent.OutputObject
  >;
  getEvent(
    key: 'FundingRatePublished',
  ): TypedContractEvent<
    FundingRatePublishedEvent.InputTuple,
    FundingRatePublishedEvent.OutputTuple,
    FundingRatePublishedEvent.OutputObject
  >;
  getEvent(
    key: 'IndexPricePublished',
  ): TypedContractEvent<
    IndexPricePublishedEvent.InputTuple,
    IndexPricePublishedEvent.OutputTuple,
    IndexPricePublishedEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidatedPositionBelowMinimum',
  ): TypedContractEvent<
    LiquidatedPositionBelowMinimumEvent.InputTuple,
    LiquidatedPositionBelowMinimumEvent.OutputTuple,
    LiquidatedPositionBelowMinimumEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidatedPositionInDeactivatedMarket',
  ): TypedContractEvent<
    LiquidatedPositionInDeactivatedMarketEvent.InputTuple,
    LiquidatedPositionInDeactivatedMarketEvent.OutputTuple,
    LiquidatedPositionInDeactivatedMarketEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidatedWalletExit',
  ): TypedContractEvent<
    LiquidatedWalletExitEvent.InputTuple,
    LiquidatedWalletExitEvent.OutputTuple,
    LiquidatedWalletExitEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidatedWalletInMaintenance',
  ): TypedContractEvent<
    LiquidatedWalletInMaintenanceEvent.InputTuple,
    LiquidatedWalletInMaintenanceEvent.OutputTuple,
    LiquidatedWalletInMaintenanceEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidatedWalletInMaintenanceDuringSystemRecovery',
  ): TypedContractEvent<
    LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.InputTuple,
    LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputTuple,
    LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputObject
  >;
  getEvent(
    key: 'LiquidationAcquisitionExecuted',
  ): TypedContractEvent<
    LiquidationAcquisitionExecutedEvent.InputTuple,
    LiquidationAcquisitionExecutedEvent.OutputTuple,
    LiquidationAcquisitionExecutedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketActivated',
  ): TypedContractEvent<
    MarketActivatedEvent.InputTuple,
    MarketActivatedEvent.OutputTuple,
    MarketActivatedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketAdded',
  ): TypedContractEvent<
    MarketAddedEvent.InputTuple,
    MarketAddedEvent.OutputTuple,
    MarketAddedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketDeactivated',
  ): TypedContractEvent<
    MarketDeactivatedEvent.InputTuple,
    MarketDeactivatedEvent.OutputTuple,
    MarketDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketOverridesUnset',
  ): TypedContractEvent<
    MarketOverridesUnsetEvent.InputTuple,
    MarketOverridesUnsetEvent.OutputTuple,
    MarketOverridesUnsetEvent.OutputObject
  >;
  getEvent(
    key: 'OrderNonceInvalidated',
  ): TypedContractEvent<
    OrderNonceInvalidatedEvent.InputTuple,
    OrderNonceInvalidatedEvent.OutputTuple,
    OrderNonceInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: 'PendingDepositApplied',
  ): TypedContractEvent<
    PendingDepositAppliedEvent.InputTuple,
    PendingDepositAppliedEvent.OutputTuple,
    PendingDepositAppliedEvent.OutputObject
  >;
  getEvent(
    key: 'PositionBelowMinimumLiquidationPriceToleranceMultiplierChanged',
  ): TypedContractEvent<
    PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.InputTuple,
    PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputTuple,
    PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputObject
  >;
  getEvent(
    key: 'QuoteTokenAddressChanged',
  ): TypedContractEvent<
    QuoteTokenAddressChangedEvent.InputTuple,
    QuoteTokenAddressChangedEvent.OutputTuple,
    QuoteTokenAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: 'TradeExecuted',
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: 'Transferred',
  ): TypedContractEvent<
    TransferredEvent.InputTuple,
    TransferredEvent.OutputTuple,
    TransferredEvent.OutputObject
  >;
  getEvent(
    key: 'WalletExitCleared',
  ): TypedContractEvent<
    WalletExitClearedEvent.InputTuple,
    WalletExitClearedEvent.OutputTuple,
    WalletExitClearedEvent.OutputObject
  >;
  getEvent(
    key: 'WalletExitWithdrawn',
  ): TypedContractEvent<
    WalletExitWithdrawnEvent.InputTuple,
    WalletExitWithdrawnEvent.OutputTuple,
    WalletExitWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'WalletExited',
  ): TypedContractEvent<
    WalletExitedEvent.InputTuple,
    WalletExitedEvent.OutputTuple,
    WalletExitedEvent.OutputObject
  >;
  getEvent(
    key: 'Withdrawn',
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    'ChainPropagationPeriodChanged(uint256,uint256)': TypedContractEvent<
      ChainPropagationPeriodChangedEvent.InputTuple,
      ChainPropagationPeriodChangedEvent.OutputTuple,
      ChainPropagationPeriodChangedEvent.OutputObject
    >;
    ChainPropagationPeriodChanged: TypedContractEvent<
      ChainPropagationPeriodChangedEvent.InputTuple,
      ChainPropagationPeriodChangedEvent.OutputTuple,
      ChainPropagationPeriodChangedEvent.OutputObject
    >;

    'DelegateKeyExpirationPeriodChanged(uint256,uint256)': TypedContractEvent<
      DelegateKeyExpirationPeriodChangedEvent.InputTuple,
      DelegateKeyExpirationPeriodChangedEvent.OutputTuple,
      DelegateKeyExpirationPeriodChangedEvent.OutputObject
    >;
    DelegateKeyExpirationPeriodChanged: TypedContractEvent<
      DelegateKeyExpirationPeriodChangedEvent.InputTuple,
      DelegateKeyExpirationPeriodChangedEvent.OutputTuple,
      DelegateKeyExpirationPeriodChangedEvent.OutputObject
    >;

    'DeleveragedExitAcquisition(string,address,address,uint64,uint64)': TypedContractEvent<
      DeleveragedExitAcquisitionEvent.InputTuple,
      DeleveragedExitAcquisitionEvent.OutputTuple,
      DeleveragedExitAcquisitionEvent.OutputObject
    >;
    DeleveragedExitAcquisition: TypedContractEvent<
      DeleveragedExitAcquisitionEvent.InputTuple,
      DeleveragedExitAcquisitionEvent.OutputTuple,
      DeleveragedExitAcquisitionEvent.OutputObject
    >;

    'DeleveragedExitFundClosure(string,address,address,uint64,uint64)': TypedContractEvent<
      DeleveragedExitFundClosureEvent.InputTuple,
      DeleveragedExitFundClosureEvent.OutputTuple,
      DeleveragedExitFundClosureEvent.OutputObject
    >;
    DeleveragedExitFundClosure: TypedContractEvent<
      DeleveragedExitFundClosureEvent.InputTuple,
      DeleveragedExitFundClosureEvent.OutputTuple,
      DeleveragedExitFundClosureEvent.OutputObject
    >;

    'DeleveragedInMaintenanceAcquisition(string,address,address,uint64,uint64)': TypedContractEvent<
      DeleveragedInMaintenanceAcquisitionEvent.InputTuple,
      DeleveragedInMaintenanceAcquisitionEvent.OutputTuple,
      DeleveragedInMaintenanceAcquisitionEvent.OutputObject
    >;
    DeleveragedInMaintenanceAcquisition: TypedContractEvent<
      DeleveragedInMaintenanceAcquisitionEvent.InputTuple,
      DeleveragedInMaintenanceAcquisitionEvent.OutputTuple,
      DeleveragedInMaintenanceAcquisitionEvent.OutputObject
    >;

    'DeleveragedInsuranceFundClosure(string,address,address,uint64,uint64)': TypedContractEvent<
      DeleveragedInsuranceFundClosureEvent.InputTuple,
      DeleveragedInsuranceFundClosureEvent.OutputTuple,
      DeleveragedInsuranceFundClosureEvent.OutputObject
    >;
    DeleveragedInsuranceFundClosure: TypedContractEvent<
      DeleveragedInsuranceFundClosureEvent.InputTuple,
      DeleveragedInsuranceFundClosureEvent.OutputTuple,
      DeleveragedInsuranceFundClosureEvent.OutputObject
    >;

    'Deposited(uint64,address,address,uint64)': TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    'DepositsDisabled()': TypedContractEvent<
      DepositsDisabledEvent.InputTuple,
      DepositsDisabledEvent.OutputTuple,
      DepositsDisabledEvent.OutputObject
    >;
    DepositsDisabled: TypedContractEvent<
      DepositsDisabledEvent.InputTuple,
      DepositsDisabledEvent.OutputTuple,
      DepositsDisabledEvent.OutputObject
    >;

    'DepositsEnabled()': TypedContractEvent<
      DepositsEnabledEvent.InputTuple,
      DepositsEnabledEvent.OutputTuple,
      DepositsEnabledEvent.OutputObject
    >;
    DepositsEnabled: TypedContractEvent<
      DepositsEnabledEvent.InputTuple,
      DepositsEnabledEvent.OutputTuple,
      DepositsEnabledEvent.OutputObject
    >;

    'DispatcherChanged(address,address)': TypedContractEvent<
      DispatcherChangedEvent.InputTuple,
      DispatcherChangedEvent.OutputTuple,
      DispatcherChangedEvent.OutputObject
    >;
    DispatcherChanged: TypedContractEvent<
      DispatcherChangedEvent.InputTuple,
      DispatcherChangedEvent.OutputTuple,
      DispatcherChangedEvent.OutputObject
    >;

    'ExitFundWalletChanged(address,address)': TypedContractEvent<
      ExitFundWalletChangedEvent.InputTuple,
      ExitFundWalletChangedEvent.OutputTuple,
      ExitFundWalletChangedEvent.OutputObject
    >;
    ExitFundWalletChanged: TypedContractEvent<
      ExitFundWalletChangedEvent.InputTuple,
      ExitFundWalletChangedEvent.OutputTuple,
      ExitFundWalletChangedEvent.OutputObject
    >;

    'FeeWalletChanged(address,address)': TypedContractEvent<
      FeeWalletChangedEvent.InputTuple,
      FeeWalletChangedEvent.OutputTuple,
      FeeWalletChangedEvent.OutputObject
    >;
    FeeWalletChanged: TypedContractEvent<
      FeeWalletChangedEvent.InputTuple,
      FeeWalletChangedEvent.OutputTuple,
      FeeWalletChangedEvent.OutputObject
    >;

    'FundingRatePublished(string,int64)': TypedContractEvent<
      FundingRatePublishedEvent.InputTuple,
      FundingRatePublishedEvent.OutputTuple,
      FundingRatePublishedEvent.OutputObject
    >;
    FundingRatePublished: TypedContractEvent<
      FundingRatePublishedEvent.InputTuple,
      FundingRatePublishedEvent.OutputTuple,
      FundingRatePublishedEvent.OutputObject
    >;

    'IndexPricePublished(string,uint64,uint64)': TypedContractEvent<
      IndexPricePublishedEvent.InputTuple,
      IndexPricePublishedEvent.OutputTuple,
      IndexPricePublishedEvent.OutputObject
    >;
    IndexPricePublished: TypedContractEvent<
      IndexPricePublishedEvent.InputTuple,
      IndexPricePublishedEvent.OutputTuple,
      IndexPricePublishedEvent.OutputObject
    >;

    'LiquidatedPositionBelowMinimum(string,address,uint64,uint64)': TypedContractEvent<
      LiquidatedPositionBelowMinimumEvent.InputTuple,
      LiquidatedPositionBelowMinimumEvent.OutputTuple,
      LiquidatedPositionBelowMinimumEvent.OutputObject
    >;
    LiquidatedPositionBelowMinimum: TypedContractEvent<
      LiquidatedPositionBelowMinimumEvent.InputTuple,
      LiquidatedPositionBelowMinimumEvent.OutputTuple,
      LiquidatedPositionBelowMinimumEvent.OutputObject
    >;

    'LiquidatedPositionInDeactivatedMarket(string,address,uint64,uint64)': TypedContractEvent<
      LiquidatedPositionInDeactivatedMarketEvent.InputTuple,
      LiquidatedPositionInDeactivatedMarketEvent.OutputTuple,
      LiquidatedPositionInDeactivatedMarketEvent.OutputObject
    >;
    LiquidatedPositionInDeactivatedMarket: TypedContractEvent<
      LiquidatedPositionInDeactivatedMarketEvent.InputTuple,
      LiquidatedPositionInDeactivatedMarketEvent.OutputTuple,
      LiquidatedPositionInDeactivatedMarketEvent.OutputObject
    >;

    'LiquidatedWalletExit(address)': TypedContractEvent<
      LiquidatedWalletExitEvent.InputTuple,
      LiquidatedWalletExitEvent.OutputTuple,
      LiquidatedWalletExitEvent.OutputObject
    >;
    LiquidatedWalletExit: TypedContractEvent<
      LiquidatedWalletExitEvent.InputTuple,
      LiquidatedWalletExitEvent.OutputTuple,
      LiquidatedWalletExitEvent.OutputObject
    >;

    'LiquidatedWalletInMaintenance(address)': TypedContractEvent<
      LiquidatedWalletInMaintenanceEvent.InputTuple,
      LiquidatedWalletInMaintenanceEvent.OutputTuple,
      LiquidatedWalletInMaintenanceEvent.OutputObject
    >;
    LiquidatedWalletInMaintenance: TypedContractEvent<
      LiquidatedWalletInMaintenanceEvent.InputTuple,
      LiquidatedWalletInMaintenanceEvent.OutputTuple,
      LiquidatedWalletInMaintenanceEvent.OutputObject
    >;

    'LiquidatedWalletInMaintenanceDuringSystemRecovery(address)': TypedContractEvent<
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.InputTuple,
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputTuple,
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputObject
    >;
    LiquidatedWalletInMaintenanceDuringSystemRecovery: TypedContractEvent<
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.InputTuple,
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputTuple,
      LiquidatedWalletInMaintenanceDuringSystemRecoveryEvent.OutputObject
    >;

    'LiquidationAcquisitionExecuted(address,address,string,string,uint64,uint64,uint8,int64,uint64)': TypedContractEvent<
      LiquidationAcquisitionExecutedEvent.InputTuple,
      LiquidationAcquisitionExecutedEvent.OutputTuple,
      LiquidationAcquisitionExecutedEvent.OutputObject
    >;
    LiquidationAcquisitionExecuted: TypedContractEvent<
      LiquidationAcquisitionExecutedEvent.InputTuple,
      LiquidationAcquisitionExecutedEvent.OutputTuple,
      LiquidationAcquisitionExecutedEvent.OutputObject
    >;

    'MarketActivated(string)': TypedContractEvent<
      MarketActivatedEvent.InputTuple,
      MarketActivatedEvent.OutputTuple,
      MarketActivatedEvent.OutputObject
    >;
    MarketActivated: TypedContractEvent<
      MarketActivatedEvent.InputTuple,
      MarketActivatedEvent.OutputTuple,
      MarketActivatedEvent.OutputObject
    >;

    'MarketAdded(string)': TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;
    MarketAdded: TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;

    'MarketDeactivated(string)': TypedContractEvent<
      MarketDeactivatedEvent.InputTuple,
      MarketDeactivatedEvent.OutputTuple,
      MarketDeactivatedEvent.OutputObject
    >;
    MarketDeactivated: TypedContractEvent<
      MarketDeactivatedEvent.InputTuple,
      MarketDeactivatedEvent.OutputTuple,
      MarketDeactivatedEvent.OutputObject
    >;

    'MarketOverridesUnset(string,address)': TypedContractEvent<
      MarketOverridesUnsetEvent.InputTuple,
      MarketOverridesUnsetEvent.OutputTuple,
      MarketOverridesUnsetEvent.OutputObject
    >;
    MarketOverridesUnset: TypedContractEvent<
      MarketOverridesUnsetEvent.InputTuple,
      MarketOverridesUnsetEvent.OutputTuple,
      MarketOverridesUnsetEvent.OutputObject
    >;

    'OrderNonceInvalidated(address,uint128,uint128,uint256)': TypedContractEvent<
      OrderNonceInvalidatedEvent.InputTuple,
      OrderNonceInvalidatedEvent.OutputTuple,
      OrderNonceInvalidatedEvent.OutputObject
    >;
    OrderNonceInvalidated: TypedContractEvent<
      OrderNonceInvalidatedEvent.InputTuple,
      OrderNonceInvalidatedEvent.OutputTuple,
      OrderNonceInvalidatedEvent.OutputObject
    >;

    'PendingDepositApplied(address,uint64,int64)': TypedContractEvent<
      PendingDepositAppliedEvent.InputTuple,
      PendingDepositAppliedEvent.OutputTuple,
      PendingDepositAppliedEvent.OutputObject
    >;
    PendingDepositApplied: TypedContractEvent<
      PendingDepositAppliedEvent.InputTuple,
      PendingDepositAppliedEvent.OutputTuple,
      PendingDepositAppliedEvent.OutputObject
    >;

    'PositionBelowMinimumLiquidationPriceToleranceMultiplierChanged(uint256,uint256)': TypedContractEvent<
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.InputTuple,
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputTuple,
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputObject
    >;
    PositionBelowMinimumLiquidationPriceToleranceMultiplierChanged: TypedContractEvent<
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.InputTuple,
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputTuple,
      PositionBelowMinimumLiquidationPriceToleranceMultiplierChangedEvent.OutputObject
    >;

    'QuoteTokenAddressChanged(address,address)': TypedContractEvent<
      QuoteTokenAddressChangedEvent.InputTuple,
      QuoteTokenAddressChangedEvent.OutputTuple,
      QuoteTokenAddressChangedEvent.OutputObject
    >;
    QuoteTokenAddressChanged: TypedContractEvent<
      QuoteTokenAddressChangedEvent.InputTuple,
      QuoteTokenAddressChangedEvent.OutputTuple,
      QuoteTokenAddressChangedEvent.OutputObject
    >;

    'TradeExecuted(address,address,string,string,uint64,uint64,uint8,int64,uint64)': TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    'Transferred(address,address,uint64,int64,int64)': TypedContractEvent<
      TransferredEvent.InputTuple,
      TransferredEvent.OutputTuple,
      TransferredEvent.OutputObject
    >;
    Transferred: TypedContractEvent<
      TransferredEvent.InputTuple,
      TransferredEvent.OutputTuple,
      TransferredEvent.OutputObject
    >;

    'WalletExitCleared(address)': TypedContractEvent<
      WalletExitClearedEvent.InputTuple,
      WalletExitClearedEvent.OutputTuple,
      WalletExitClearedEvent.OutputObject
    >;
    WalletExitCleared: TypedContractEvent<
      WalletExitClearedEvent.InputTuple,
      WalletExitClearedEvent.OutputTuple,
      WalletExitClearedEvent.OutputObject
    >;

    'WalletExitWithdrawn(address,uint64)': TypedContractEvent<
      WalletExitWithdrawnEvent.InputTuple,
      WalletExitWithdrawnEvent.OutputTuple,
      WalletExitWithdrawnEvent.OutputObject
    >;
    WalletExitWithdrawn: TypedContractEvent<
      WalletExitWithdrawnEvent.InputTuple,
      WalletExitWithdrawnEvent.OutputTuple,
      WalletExitWithdrawnEvent.OutputObject
    >;

    'WalletExited(address,uint256)': TypedContractEvent<
      WalletExitedEvent.InputTuple,
      WalletExitedEvent.OutputTuple,
      WalletExitedEvent.OutputObject
    >;
    WalletExited: TypedContractEvent<
      WalletExitedEvent.InputTuple,
      WalletExitedEvent.OutputTuple,
      WalletExitedEvent.OutputObject
    >;

    'Withdrawn(address,uint64,int64)': TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
