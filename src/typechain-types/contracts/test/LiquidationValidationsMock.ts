/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface LiquidationValidationsMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'calculateQuoteQuantityAtBankruptcyPrice'
      | 'validateDeactivatedMarketLiquidationQuoteQuantity'
      | 'validateInsuranceFundClosureQuoteQuantity'
      | 'validateQuoteQuantityAtBankruptcyPrice'
      | 'validateQuoteQuantityAtExitPrice',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateQuoteQuantityAtBankruptcyPrice',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateDeactivatedMarketLiquidationQuoteQuantity',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateInsuranceFundClosureQuoteQuantity',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateQuoteQuantityAtBankruptcyPrice',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateQuoteQuantityAtExitPrice',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'calculateQuoteQuantityAtBankruptcyPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validateDeactivatedMarketLiquidationQuoteQuantity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validateInsuranceFundClosureQuoteQuantity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validateQuoteQuantityAtBankruptcyPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validateQuoteQuantityAtExitPrice',
    data: BytesLike,
  ): Result;
}

export interface LiquidationValidationsMock extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidationValidationsMock;
  waitForDeployment(): Promise<this>;

  interface: LiquidationValidationsMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  calculateQuoteQuantityAtBankruptcyPrice: TypedContractMethod<
    [
      indexPrice: BigNumberish,
      maintenanceMarginFraction: BigNumberish,
      positionSize: BigNumberish,
      totalAccountValueInDoublePips: BigNumberish,
      totalMaintenanceMarginRequirementInTriplePips: BigNumberish,
    ],
    [bigint],
    'view'
  >;

  validateDeactivatedMarketLiquidationQuoteQuantity: TypedContractMethod<
    [
      indexPrice: BigNumberish,
      positionSize: BigNumberish,
      quoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;

  validateInsuranceFundClosureQuoteQuantity: TypedContractMethod<
    [
      baseQuantity: BigNumberish,
      costBasis: BigNumberish,
      positionSize: BigNumberish,
      quoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;

  validateQuoteQuantityAtBankruptcyPrice: TypedContractMethod<
    [
      indexPrice: BigNumberish,
      liquidationBaseQuantity: BigNumberish,
      liquidationQuoteQuantity: BigNumberish,
      maintenanceMarginFraction: BigNumberish,
      totalAccountValueInDoublePips: BigNumberish,
      totalMaintenanceMarginRequirementInTriplePips: BigNumberish,
    ],
    [void],
    'view'
  >;

  validateQuoteQuantityAtExitPrice: TypedContractMethod<
    [
      costBasis: BigNumberish,
      indexPrice: BigNumberish,
      liquidationBaseQuantity: BigNumberish,
      liquidationQuoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'calculateQuoteQuantityAtBankruptcyPrice',
  ): TypedContractMethod<
    [
      indexPrice: BigNumberish,
      maintenanceMarginFraction: BigNumberish,
      positionSize: BigNumberish,
      totalAccountValueInDoublePips: BigNumberish,
      totalMaintenanceMarginRequirementInTriplePips: BigNumberish,
    ],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'validateDeactivatedMarketLiquidationQuoteQuantity',
  ): TypedContractMethod<
    [
      indexPrice: BigNumberish,
      positionSize: BigNumberish,
      quoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;
  getFunction(
    nameOrSignature: 'validateInsuranceFundClosureQuoteQuantity',
  ): TypedContractMethod<
    [
      baseQuantity: BigNumberish,
      costBasis: BigNumberish,
      positionSize: BigNumberish,
      quoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;
  getFunction(
    nameOrSignature: 'validateQuoteQuantityAtBankruptcyPrice',
  ): TypedContractMethod<
    [
      indexPrice: BigNumberish,
      liquidationBaseQuantity: BigNumberish,
      liquidationQuoteQuantity: BigNumberish,
      maintenanceMarginFraction: BigNumberish,
      totalAccountValueInDoublePips: BigNumberish,
      totalMaintenanceMarginRequirementInTriplePips: BigNumberish,
    ],
    [void],
    'view'
  >;
  getFunction(
    nameOrSignature: 'validateQuoteQuantityAtExitPrice',
  ): TypedContractMethod<
    [
      costBasis: BigNumberish,
      indexPrice: BigNumberish,
      liquidationBaseQuantity: BigNumberish,
      liquidationQuoteQuantity: BigNumberish,
    ],
    [void],
    'view'
  >;

  filters: {};
}
