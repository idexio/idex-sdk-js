/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface MathMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'divideRoundNearest'
      | 'divideRoundUp'
      | 'maxSigned'
      | 'maxUnsigned'
      | 'minUnsigned'
      | 'multiplyPipsByFractionSigned'
      | 'multiplyPipsByFractionUnsigned'
      | 'toInt64FromInt256'
      | 'toInt64FromUint64',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'divideRoundNearest',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'divideRoundUp',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxSigned',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxUnsigned',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'minUnsigned',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'multiplyPipsByFractionSigned',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'multiplyPipsByFractionUnsigned',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'toInt64FromInt256',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'toInt64FromUint64',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'divideRoundNearest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'divideRoundUp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxSigned', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxUnsigned',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minUnsigned',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiplyPipsByFractionSigned',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiplyPipsByFractionUnsigned',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toInt64FromInt256',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toInt64FromUint64',
    data: BytesLike,
  ): Result;
}

export interface MathMock extends BaseContract {
  connect(runner?: ContractRunner | null): MathMock;
  waitForDeployment(): Promise<this>;

  interface: MathMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  divideRoundNearest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    'view'
  >;

  divideRoundUp: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    'view'
  >;

  maxSigned: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    'view'
  >;

  maxUnsigned: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    'view'
  >;

  minUnsigned: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    'view'
  >;

  multiplyPipsByFractionSigned: TypedContractMethod<
    [
      multiplicand: BigNumberish,
      fractionDividend: BigNumberish,
      fractionDivisor: BigNumberish,
    ],
    [bigint],
    'view'
  >;

  multiplyPipsByFractionUnsigned: TypedContractMethod<
    [
      multiplicand: BigNumberish,
      fractionDividend: BigNumberish,
      fractionDivisor: BigNumberish,
    ],
    [bigint],
    'view'
  >;

  toInt64FromInt256: TypedContractMethod<
    [value: BigNumberish],
    [bigint],
    'view'
  >;

  toInt64FromUint64: TypedContractMethod<
    [value: BigNumberish],
    [bigint],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'divideRoundNearest',
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'divideRoundUp',
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxSigned',
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxUnsigned',
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'minUnsigned',
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'multiplyPipsByFractionSigned',
  ): TypedContractMethod<
    [
      multiplicand: BigNumberish,
      fractionDividend: BigNumberish,
      fractionDivisor: BigNumberish,
    ],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'multiplyPipsByFractionUnsigned',
  ): TypedContractMethod<
    [
      multiplicand: BigNumberish,
      fractionDividend: BigNumberish,
      fractionDivisor: BigNumberish,
    ],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'toInt64FromInt256',
  ): TypedContractMethod<[value: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'toInt64FromUint64',
  ): TypedContractMethod<[value: BigNumberish], [bigint], 'view'>;

  filters: {};
}
