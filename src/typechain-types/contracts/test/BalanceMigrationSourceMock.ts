/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export type BalanceStruct = {
  isMigrated: boolean;
  balance: BigNumberish;
  costBasis: BigNumberish;
  lastUpdateTimestampInMs: BigNumberish;
};

export type BalanceStructOutput = [
  isMigrated: boolean,
  balance: bigint,
  costBasis: bigint,
  lastUpdateTimestampInMs: bigint,
] & {
  isMigrated: boolean;
  balance: bigint;
  costBasis: bigint;
  lastUpdateTimestampInMs: bigint;
};

export interface BalanceMigrationSourceMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'balances'
      | 'depositIndex'
      | 'loadBalanceStructBySymbol'
      | 'setBalanceBySymbol',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'balances',
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositIndex',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loadBalanceStructBySymbol',
    values: [AddressLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBalanceBySymbol',
    values: [AddressLike, string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadBalanceStructBySymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBalanceBySymbol',
    data: BytesLike,
  ): Result;
}

export interface BalanceMigrationSourceMock extends BaseContract {
  connect(runner?: ContractRunner | null): BalanceMigrationSourceMock;
  waitForDeployment(): Promise<this>;

  interface: BalanceMigrationSourceMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  balances: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    'view'
  >;

  depositIndex: TypedContractMethod<[], [bigint], 'view'>;

  loadBalanceStructBySymbol: TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [BalanceStructOutput],
    'view'
  >;

  setBalanceBySymbol: TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string, newBalance: BigNumberish],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'balances',
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'depositIndex',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadBalanceStructBySymbol',
  ): TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string],
    [BalanceStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'setBalanceBySymbol',
  ): TypedContractMethod<
    [wallet: AddressLike, assetSymbol: string, newBalance: BigNumberish],
    [void],
    'nonpayable'
  >;

  filters: {};
}
