/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface ExchangeLayerZeroAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'PIP_PRICE_MULTIPLIER'
      | 'adminWallet'
      | 'custodian'
      | 'estimateWithdrawQuantityInAssetUnits'
      | 'isDepositEnabled'
      | 'isWithdrawEnabled'
      | 'loadGasFeesInAssetUnits'
      | 'lzCompose'
      | 'lzEndpoint'
      | 'minimumWithdrawQuantityMultiplier'
      | 'oft'
      | 'ownerWallet'
      | 'quoteAsset'
      | 'removeAdmin'
      | 'removeOwner'
      | 'setAdmin'
      | 'setDepositEnabled'
      | 'setMinimumWithdrawQuantityMultiplier'
      | 'setOwner'
      | 'setWithdrawEnabled'
      | 'withdrawNativeAsset'
      | 'withdrawQuoteAsset',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'LzComposeFailed' | 'WithdrawQuoteAssetFailed',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'PIP_PRICE_MULTIPLIER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'adminWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'custodian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'estimateWithdrawQuantityInAssetUnits',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isDepositEnabled',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isWithdrawEnabled',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loadGasFeesInAssetUnits',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzCompose',
    values: [AddressLike, BytesLike, BytesLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzEndpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'minimumWithdrawQuantityMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'oft', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteAsset',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdmin',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositEnabled',
    values: [boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinimumWithdrawQuantityMultiplier',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOwner',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setWithdrawEnabled',
    values: [boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawNativeAsset',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawQuoteAsset',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PIP_PRICE_MULTIPLIER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'adminWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'custodian', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'estimateWithdrawQuantityInAssetUnits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isDepositEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWithdrawEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadGasFeesInAssetUnits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lzCompose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lzEndpoint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'minimumWithdrawQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'oft', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ownerWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'quoteAsset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMinimumWithdrawQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setWithdrawEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawNativeAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawQuoteAsset',
    data: BytesLike,
  ): Result;
}

export namespace LzComposeFailedEvent {
  export type InputTuple = [
    destinationWallet: AddressLike,
    quantity: BigNumberish,
    errorData: BytesLike,
  ];
  export type OutputTuple = [
    destinationWallet: string,
    quantity: bigint,
    errorData: string,
  ];
  export interface OutputObject {
    destinationWallet: string;
    quantity: bigint;
    errorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawQuoteAssetFailedEvent {
  export type InputTuple = [
    destinationWallet: AddressLike,
    quantity: BigNumberish,
    payload: BytesLike,
    errorData: BytesLike,
  ];
  export type OutputTuple = [
    destinationWallet: string,
    quantity: bigint,
    payload: string,
    errorData: string,
  ];
  export interface OutputObject {
    destinationWallet: string;
    quantity: bigint;
    payload: string;
    errorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExchangeLayerZeroAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): ExchangeLayerZeroAdapter;
  waitForDeployment(): Promise<this>;

  interface: ExchangeLayerZeroAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  PIP_PRICE_MULTIPLIER: TypedContractMethod<[], [bigint], 'view'>;

  adminWallet: TypedContractMethod<[], [string], 'view'>;

  custodian: TypedContractMethod<[], [string], 'view'>;

  estimateWithdrawQuantityInAssetUnits: TypedContractMethod<
    [
      destinationWallet: AddressLike,
      quantity: BigNumberish,
      payload: BytesLike,
    ],
    [
      [bigint, bigint, bigint] & {
        estimatedWithdrawQuantityInAssetUnits: bigint;
        minimumWithdrawQuantityInAssetUnits: bigint;
        poolDecimals: bigint;
      },
    ],
    'view'
  >;

  isDepositEnabled: TypedContractMethod<[], [boolean], 'view'>;

  isWithdrawEnabled: TypedContractMethod<[], [boolean], 'view'>;

  loadGasFeesInAssetUnits: TypedContractMethod<
    [layerZeroEndpointIds: BigNumberish[]],
    [bigint[]],
    'view'
  >;

  lzCompose: TypedContractMethod<
    [
      _from: AddressLike,
      arg1: BytesLike,
      _message: BytesLike,
      arg3: AddressLike,
      arg4: BytesLike,
    ],
    [void],
    'payable'
  >;

  lzEndpoint: TypedContractMethod<[], [string], 'view'>;

  minimumWithdrawQuantityMultiplier: TypedContractMethod<[], [bigint], 'view'>;

  oft: TypedContractMethod<[], [string], 'view'>;

  ownerWallet: TypedContractMethod<[], [string], 'view'>;

  quoteAsset: TypedContractMethod<[], [string], 'view'>;

  removeAdmin: TypedContractMethod<[], [void], 'nonpayable'>;

  removeOwner: TypedContractMethod<[], [void], 'nonpayable'>;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;

  setDepositEnabled: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    'nonpayable'
  >;

  setMinimumWithdrawQuantityMultiplier: TypedContractMethod<
    [newMinimumWithdrawQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  setWithdrawEnabled: TypedContractMethod<
    [isEnabled: boolean],
    [void],
    'nonpayable'
  >;

  withdrawNativeAsset: TypedContractMethod<
    [destinationContractOrWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;

  withdrawQuoteAsset: TypedContractMethod<
    [
      destinationWallet: AddressLike,
      quantity: BigNumberish,
      payload: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'PIP_PRICE_MULTIPLIER',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'adminWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'custodian',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'estimateWithdrawQuantityInAssetUnits',
  ): TypedContractMethod<
    [
      destinationWallet: AddressLike,
      quantity: BigNumberish,
      payload: BytesLike,
    ],
    [
      [bigint, bigint, bigint] & {
        estimatedWithdrawQuantityInAssetUnits: bigint;
        minimumWithdrawQuantityInAssetUnits: bigint;
        poolDecimals: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isDepositEnabled',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isWithdrawEnabled',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'loadGasFeesInAssetUnits',
  ): TypedContractMethod<
    [layerZeroEndpointIds: BigNumberish[]],
    [bigint[]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'lzCompose',
  ): TypedContractMethod<
    [
      _from: AddressLike,
      arg1: BytesLike,
      _message: BytesLike,
      arg3: AddressLike,
      arg4: BytesLike,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'lzEndpoint',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'minimumWithdrawQuantityMultiplier',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'oft',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'ownerWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'quoteAsset',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeAdmin',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeOwner',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAdmin',
  ): TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setDepositEnabled',
  ): TypedContractMethod<[isEnabled: boolean], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMinimumWithdrawQuantityMultiplier',
  ): TypedContractMethod<
    [newMinimumWithdrawQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setOwner',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setWithdrawEnabled',
  ): TypedContractMethod<[isEnabled: boolean], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdrawNativeAsset',
  ): TypedContractMethod<
    [destinationContractOrWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawQuoteAsset',
  ): TypedContractMethod<
    [
      destinationWallet: AddressLike,
      quantity: BigNumberish,
      payload: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'LzComposeFailed',
  ): TypedContractEvent<
    LzComposeFailedEvent.InputTuple,
    LzComposeFailedEvent.OutputTuple,
    LzComposeFailedEvent.OutputObject
  >;
  getEvent(
    key: 'WithdrawQuoteAssetFailed',
  ): TypedContractEvent<
    WithdrawQuoteAssetFailedEvent.InputTuple,
    WithdrawQuoteAssetFailedEvent.OutputTuple,
    WithdrawQuoteAssetFailedEvent.OutputObject
  >;

  filters: {
    'LzComposeFailed(address,uint256,bytes)': TypedContractEvent<
      LzComposeFailedEvent.InputTuple,
      LzComposeFailedEvent.OutputTuple,
      LzComposeFailedEvent.OutputObject
    >;
    LzComposeFailed: TypedContractEvent<
      LzComposeFailedEvent.InputTuple,
      LzComposeFailedEvent.OutputTuple,
      LzComposeFailedEvent.OutputObject
    >;

    'WithdrawQuoteAssetFailed(address,uint256,bytes,bytes)': TypedContractEvent<
      WithdrawQuoteAssetFailedEvent.InputTuple,
      WithdrawQuoteAssetFailedEvent.OutputTuple,
      WithdrawQuoteAssetFailedEvent.OutputObject
    >;
    WithdrawQuoteAssetFailed: TypedContractEvent<
      WithdrawQuoteAssetFailedEvent.InputTuple,
      WithdrawQuoteAssetFailedEvent.OutputTuple,
      WithdrawQuoteAssetFailedEvent.OutputObject
    >;
  };
}
