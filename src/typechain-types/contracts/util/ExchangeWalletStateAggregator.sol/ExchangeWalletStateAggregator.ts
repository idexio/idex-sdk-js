/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export type BalanceStruct = {
  isMigrated: boolean;
  balance: BigNumberish;
  costBasis: BigNumberish;
  lastUpdateTimestampInMs: BigNumberish;
};

export type BalanceStructOutput = [
  isMigrated: boolean,
  balance: bigint,
  costBasis: bigint,
  lastUpdateTimestampInMs: bigint,
] & {
  isMigrated: boolean;
  balance: bigint;
  costBasis: bigint;
  lastUpdateTimestampInMs: bigint;
};

export type WalletExitStruct = {
  exists: boolean;
  effectiveBlockTimestamp: BigNumberish;
  deleveragePriceStrategy: BigNumberish;
};

export type WalletExitStructOutput = [
  exists: boolean,
  effectiveBlockTimestamp: bigint,
  deleveragePriceStrategy: bigint,
] & {
  exists: boolean;
  effectiveBlockTimestamp: bigint;
  deleveragePriceStrategy: bigint;
};

export type NonceInvalidationStruct = {
  timestampInMs: BigNumberish;
  effectiveBlockTimestamp: BigNumberish;
};

export type NonceInvalidationStructOutput = [
  timestampInMs: bigint,
  effectiveBlockTimestamp: bigint,
] & { timestampInMs: bigint; effectiveBlockTimestamp: bigint };

export type WalletStateStruct = {
  balances: BalanceStruct[];
  pendingDepositQuantity: BigNumberish;
  walletExit: WalletExitStruct;
  nonceInvalidation: NonceInvalidationStruct;
};

export type WalletStateStructOutput = [
  balances: BalanceStructOutput[],
  pendingDepositQuantity: bigint,
  walletExit: WalletExitStructOutput,
  nonceInvalidation: NonceInvalidationStructOutput,
] & {
  balances: BalanceStructOutput[];
  pendingDepositQuantity: bigint;
  walletExit: WalletExitStructOutput;
  nonceInvalidation: NonceInvalidationStructOutput;
};

export interface ExchangeWalletStateAggregatorInterface extends Interface {
  getFunction(
    nameOrSignature: 'exchange' | 'loadWalletStates',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'exchange', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'loadWalletStates',
    values: [AddressLike[]],
  ): string;

  decodeFunctionResult(functionFragment: 'exchange', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'loadWalletStates',
    data: BytesLike,
  ): Result;
}

export interface ExchangeWalletStateAggregator extends BaseContract {
  connect(runner?: ContractRunner | null): ExchangeWalletStateAggregator;
  waitForDeployment(): Promise<this>;

  interface: ExchangeWalletStateAggregatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  exchange: TypedContractMethod<[], [string], 'view'>;

  loadWalletStates: TypedContractMethod<
    [wallets: AddressLike[]],
    [WalletStateStructOutput[]],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'exchange',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'loadWalletStates',
  ): TypedContractMethod<
    [wallets: AddressLike[]],
    [WalletStateStructOutput[]],
    'view'
  >;

  filters: {};
}
