/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export type OverridableMarketFieldsStruct = {
  initialMarginFraction: BigNumberish;
  maintenanceMarginFraction: BigNumberish;
  incrementalInitialMarginFraction: BigNumberish;
  baselinePositionSize: BigNumberish;
  incrementalPositionSize: BigNumberish;
  maximumPositionSize: BigNumberish;
  minimumPositionSize: BigNumberish;
};

export type OverridableMarketFieldsStructOutput = [
  initialMarginFraction: bigint,
  maintenanceMarginFraction: bigint,
  incrementalInitialMarginFraction: bigint,
  baselinePositionSize: bigint,
  incrementalPositionSize: bigint,
  maximumPositionSize: bigint,
  minimumPositionSize: bigint,
] & {
  initialMarginFraction: bigint;
  maintenanceMarginFraction: bigint;
  incrementalInitialMarginFraction: bigint;
  baselinePositionSize: bigint;
  incrementalPositionSize: bigint;
  maximumPositionSize: bigint;
  minimumPositionSize: bigint;
};

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'adminWallet'
      | 'blockTimestampDelay'
      | 'cancelAssetMigratorUpgrade'
      | 'cancelBridgeAdaptersUpgrade'
      | 'cancelExchangeUpgrade'
      | 'cancelGovernanceUpgrade'
      | 'cancelIndexPriceAdaptersUpgrade'
      | 'cancelInsuranceFundWalletUpgrade'
      | 'cancelMarketOverridesUpgrade'
      | 'cancelOraclePriceAdapterUpgrade'
      | 'clearAssetMigrator'
      | 'currentAssetMigratorUpgrade'
      | 'currentBridgeAdaptersUpgrade'
      | 'currentExchangeUpgrade'
      | 'currentGovernanceUpgrade'
      | 'currentIndexPriceAdaptersUpgrade'
      | 'currentInsuranceFundWalletUpgrade'
      | 'currentMarketOverridesUpgradesByBaseAssetSymbolAndWallet'
      | 'currentOraclePriceAdapterUpgrade'
      | 'custodian'
      | 'finalizeAssetMigratorUpgrade'
      | 'finalizeBridgeAdaptersUpgrade'
      | 'finalizeExchangeUpgrade'
      | 'finalizeGovernanceUpgrade'
      | 'finalizeIndexPriceAdaptersUpgrade'
      | 'finalizeInsuranceFundWalletUpgrade'
      | 'finalizeMarketOverridesUpgrade'
      | 'finalizeOraclePriceAdapterUpgrade'
      | 'initiateAssetMigratorUpgrade'
      | 'initiateBridgeAdaptersUpgrade'
      | 'initiateExchangeUpgrade'
      | 'initiateGovernanceUpgrade'
      | 'initiateIndexPriceAdaptersUpgrade'
      | 'initiateInsuranceFundWalletUpgrade'
      | 'initiateMarketOverridesUpgrade'
      | 'initiateOraclePriceAdapterUpgrade'
      | 'ownerWallet'
      | 'removeAdmin'
      | 'removeOwner'
      | 'setAdmin'
      | 'setCustodian'
      | 'setOwner',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AssetMigratorCleared'
      | 'AssetMigratorUpgradeCanceled'
      | 'AssetMigratorUpgradeFinalized'
      | 'AssetMigratorUpgradeInitiated'
      | 'BridgeAdaptersUpgradeCanceled'
      | 'BridgeAdaptersUpgradeFinalized'
      | 'BridgeAdaptersUpgradeInitiated'
      | 'ExchangeUpgradeCanceled'
      | 'ExchangeUpgradeFinalized'
      | 'ExchangeUpgradeInitiated'
      | 'GovernanceUpgradeCanceled'
      | 'GovernanceUpgradeFinalized'
      | 'GovernanceUpgradeInitiated'
      | 'IndexPriceAdaptersUpgradeCanceled'
      | 'IndexPriceAdaptersUpgradeFinalized'
      | 'IndexPriceAdaptersUpgradeInitiated'
      | 'InsuranceFundWalletUpgradeCanceled'
      | 'InsuranceFundWalletUpgradeFinalized'
      | 'InsuranceFundWalletUpgradeInitiated'
      | 'MarketOverridesUpgradeCanceled'
      | 'MarketOverridesUpgradeFinalized'
      | 'MarketOverridesUpgradeInitiated'
      | 'OraclePriceAdapterUpgradeCanceled'
      | 'OraclePriceAdapterUpgradeFinalized'
      | 'OraclePriceAdapterUpgradeInitiated',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'adminWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'blockTimestampDelay',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelAssetMigratorUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelBridgeAdaptersUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelExchangeUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelGovernanceUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelIndexPriceAdaptersUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelInsuranceFundWalletUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelMarketOverridesUpgrade',
    values: [string, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelOraclePriceAdapterUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'clearAssetMigrator',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentAssetMigratorUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentBridgeAdaptersUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentExchangeUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentGovernanceUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentIndexPriceAdaptersUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentInsuranceFundWalletUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'currentMarketOverridesUpgradesByBaseAssetSymbolAndWallet',
    values: [string, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'currentOraclePriceAdapterUpgrade',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'custodian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'finalizeAssetMigratorUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeBridgeAdaptersUpgrade',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeExchangeUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeGovernanceUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeIndexPriceAdaptersUpgrade',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeInsuranceFundWalletUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeMarketOverridesUpgrade',
    values: [string, OverridableMarketFieldsStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'finalizeOraclePriceAdapterUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateAssetMigratorUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateBridgeAdaptersUpgrade',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateExchangeUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateGovernanceUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateIndexPriceAdaptersUpgrade',
    values: [AddressLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateInsuranceFundWalletUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateMarketOverridesUpgrade',
    values: [string, OverridableMarketFieldsStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateOraclePriceAdapterUpgrade',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'ownerWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdmin',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCustodian',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOwner',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'adminWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'blockTimestampDelay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelAssetMigratorUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelBridgeAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelExchangeUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelGovernanceUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelIndexPriceAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelInsuranceFundWalletUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelMarketOverridesUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelOraclePriceAdapterUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clearAssetMigrator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentAssetMigratorUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentBridgeAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentExchangeUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentGovernanceUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentIndexPriceAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentInsuranceFundWalletUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentMarketOverridesUpgradesByBaseAssetSymbolAndWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentOraclePriceAdapterUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'custodian', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeAssetMigratorUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeBridgeAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeExchangeUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeGovernanceUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeIndexPriceAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeInsuranceFundWalletUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeMarketOverridesUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeOraclePriceAdapterUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateAssetMigratorUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateBridgeAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateExchangeUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateGovernanceUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateIndexPriceAdaptersUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateInsuranceFundWalletUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateMarketOverridesUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateOraclePriceAdapterUpgrade',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ownerWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setCustodian',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
}

export namespace AssetMigratorClearedEvent {
  export type InputTuple = [
    oldAssetMigrator: AddressLike,
    newAssetMigrator: AddressLike,
  ];
  export type OutputTuple = [
    oldAssetMigrator: string,
    newAssetMigrator: string,
  ];
  export interface OutputObject {
    oldAssetMigrator: string;
    newAssetMigrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetMigratorUpgradeCanceledEvent {
  export type InputTuple = [
    oldAssetMigrator: AddressLike,
    newAssetMigrator: AddressLike,
  ];
  export type OutputTuple = [
    oldAssetMigrator: string,
    newAssetMigrator: string,
  ];
  export interface OutputObject {
    oldAssetMigrator: string;
    newAssetMigrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetMigratorUpgradeFinalizedEvent {
  export type InputTuple = [
    oldAssetMigrator: AddressLike,
    newAssetMigrator: AddressLike,
  ];
  export type OutputTuple = [
    oldAssetMigrator: string,
    newAssetMigrator: string,
  ];
  export interface OutputObject {
    oldAssetMigrator: string;
    newAssetMigrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetMigratorUpgradeInitiatedEvent {
  export type InputTuple = [
    oldAssetMigrator: AddressLike,
    newAssetMigrator: AddressLike,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    oldAssetMigrator: string,
    newAssetMigrator: string,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    oldAssetMigrator: string;
    newAssetMigrator: string;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAdaptersUpgradeCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAdaptersUpgradeFinalizedEvent {
  export type InputTuple = [newBridgeAdapters: AddressLike[]];
  export type OutputTuple = [newBridgeAdapters: string[]];
  export interface OutputObject {
    newBridgeAdapters: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAdaptersUpgradeInitiatedEvent {
  export type InputTuple = [
    newBridgeAdapters: AddressLike[],
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    newBridgeAdapters: string[],
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    newBridgeAdapters: string[];
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeUpgradeCanceledEvent {
  export type InputTuple = [oldExchange: AddressLike, newExchange: AddressLike];
  export type OutputTuple = [oldExchange: string, newExchange: string];
  export interface OutputObject {
    oldExchange: string;
    newExchange: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeUpgradeFinalizedEvent {
  export type InputTuple = [oldExchange: AddressLike, newExchange: AddressLike];
  export type OutputTuple = [oldExchange: string, newExchange: string];
  export interface OutputObject {
    oldExchange: string;
    newExchange: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeUpgradeInitiatedEvent {
  export type InputTuple = [
    oldExchange: AddressLike,
    newExchange: AddressLike,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    oldExchange: string,
    newExchange: string,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    oldExchange: string;
    newExchange: string;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceUpgradeCanceledEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGovernance: AddressLike,
  ];
  export type OutputTuple = [oldGovernance: string, newGovernance: string];
  export interface OutputObject {
    oldGovernance: string;
    newGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceUpgradeFinalizedEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGovernance: AddressLike,
  ];
  export type OutputTuple = [oldGovernance: string, newGovernance: string];
  export interface OutputObject {
    oldGovernance: string;
    newGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceUpgradeInitiatedEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGovernance: AddressLike,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    oldGovernance: string,
    newGovernance: string,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    oldGovernance: string;
    newGovernance: string;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexPriceAdaptersUpgradeCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexPriceAdaptersUpgradeFinalizedEvent {
  export type InputTuple = [newIndexPriceAdapters: AddressLike[]];
  export type OutputTuple = [newIndexPriceAdapters: string[]];
  export interface OutputObject {
    newIndexPriceAdapters: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexPriceAdaptersUpgradeInitiatedEvent {
  export type InputTuple = [
    newIndexPriceAdapters: AddressLike[],
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    newIndexPriceAdapters: string[],
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    newIndexPriceAdapters: string[];
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceFundWalletUpgradeCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceFundWalletUpgradeFinalizedEvent {
  export type InputTuple = [newInsuranceFundWallet: AddressLike];
  export type OutputTuple = [newInsuranceFundWallet: string];
  export interface OutputObject {
    newInsuranceFundWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceFundWalletUpgradeInitiatedEvent {
  export type InputTuple = [
    newInsuranceFundWallet: AddressLike,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    newInsuranceFundWallet: string,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    newInsuranceFundWallet: string;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOverridesUpgradeCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOverridesUpgradeFinalizedEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    wallet: AddressLike,
    overridableFields: OverridableMarketFieldsStruct,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    wallet: string,
    overridableFields: OverridableMarketFieldsStructOutput,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    wallet: string;
    overridableFields: OverridableMarketFieldsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOverridesUpgradeInitiatedEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    wallet: AddressLike,
    overridableFields: OverridableMarketFieldsStruct,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    wallet: string,
    overridableFields: OverridableMarketFieldsStructOutput,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    wallet: string;
    overridableFields: OverridableMarketFieldsStructOutput;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OraclePriceAdapterUpgradeCanceledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OraclePriceAdapterUpgradeFinalizedEvent {
  export type InputTuple = [newOraclePriceAdapter: AddressLike];
  export type OutputTuple = [newOraclePriceAdapter: string];
  export interface OutputObject {
    newOraclePriceAdapter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OraclePriceAdapterUpgradeInitiatedEvent {
  export type InputTuple = [
    newOraclePriceAdapter: AddressLike,
    blockTimestampThreshold: BigNumberish,
  ];
  export type OutputTuple = [
    newOraclePriceAdapter: string,
    blockTimestampThreshold: bigint,
  ];
  export interface OutputObject {
    newOraclePriceAdapter: string;
    blockTimestampThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  adminWallet: TypedContractMethod<[], [string], 'view'>;

  blockTimestampDelay: TypedContractMethod<[], [bigint], 'view'>;

  cancelAssetMigratorUpgrade: TypedContractMethod<[], [void], 'nonpayable'>;

  cancelBridgeAdaptersUpgrade: TypedContractMethod<[], [void], 'nonpayable'>;

  cancelExchangeUpgrade: TypedContractMethod<[], [void], 'nonpayable'>;

  cancelGovernanceUpgrade: TypedContractMethod<[], [void], 'nonpayable'>;

  cancelIndexPriceAdaptersUpgrade: TypedContractMethod<
    [],
    [void],
    'nonpayable'
  >;

  cancelInsuranceFundWalletUpgrade: TypedContractMethod<
    [],
    [void],
    'nonpayable'
  >;

  cancelMarketOverridesUpgrade: TypedContractMethod<
    [baseAssetSymbol: string, wallet: AddressLike],
    [void],
    'nonpayable'
  >;

  cancelOraclePriceAdapterUpgrade: TypedContractMethod<
    [],
    [void],
    'nonpayable'
  >;

  clearAssetMigrator: TypedContractMethod<[], [void], 'nonpayable'>;

  currentAssetMigratorUpgrade: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  currentBridgeAdaptersUpgrade: TypedContractMethod<
    [],
    [[boolean, bigint] & { exists: boolean; blockTimestampThreshold: bigint }],
    'view'
  >;

  currentExchangeUpgrade: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  currentGovernanceUpgrade: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  currentIndexPriceAdaptersUpgrade: TypedContractMethod<
    [],
    [[boolean, bigint] & { exists: boolean; blockTimestampThreshold: bigint }],
    'view'
  >;

  currentInsuranceFundWalletUpgrade: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newInsuranceFundWallet: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  currentMarketOverridesUpgradesByBaseAssetSymbolAndWallet: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [boolean, OverridableMarketFieldsStructOutput, bigint] & {
        exists: boolean;
        newMarketOverrides: OverridableMarketFieldsStructOutput;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  currentOraclePriceAdapterUpgrade: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;

  custodian: TypedContractMethod<[], [string], 'view'>;

  finalizeAssetMigratorUpgrade: TypedContractMethod<
    [newAssetMigrator: AddressLike],
    [void],
    'nonpayable'
  >;

  finalizeBridgeAdaptersUpgrade: TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  finalizeExchangeUpgrade: TypedContractMethod<
    [newExchange: AddressLike],
    [void],
    'nonpayable'
  >;

  finalizeGovernanceUpgrade: TypedContractMethod<
    [newGovernance: AddressLike],
    [void],
    'nonpayable'
  >;

  finalizeIndexPriceAdaptersUpgrade: TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  finalizeInsuranceFundWalletUpgrade: TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  finalizeMarketOverridesUpgrade: TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;

  finalizeOraclePriceAdapterUpgrade: TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateAssetMigratorUpgrade: TypedContractMethod<
    [newAssetMigrator: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateBridgeAdaptersUpgrade: TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  initiateExchangeUpgrade: TypedContractMethod<
    [newExchange: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateGovernanceUpgrade: TypedContractMethod<
    [newGovernance: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateIndexPriceAdaptersUpgrade: TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;

  initiateInsuranceFundWalletUpgrade: TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateMarketOverridesUpgrade: TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;

  initiateOraclePriceAdapterUpgrade: TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;

  ownerWallet: TypedContractMethod<[], [string], 'view'>;

  removeAdmin: TypedContractMethod<[], [void], 'nonpayable'>;

  removeOwner: TypedContractMethod<[], [void], 'nonpayable'>;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;

  setCustodian: TypedContractMethod<
    [newCustodian: AddressLike],
    [void],
    'nonpayable'
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'adminWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'blockTimestampDelay',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'cancelAssetMigratorUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelBridgeAdaptersUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelExchangeUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelGovernanceUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelIndexPriceAdaptersUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelInsuranceFundWalletUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'cancelMarketOverridesUpgrade',
  ): TypedContractMethod<
    [baseAssetSymbol: string, wallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'cancelOraclePriceAdapterUpgrade',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'clearAssetMigrator',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'currentAssetMigratorUpgrade',
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'currentBridgeAdaptersUpgrade',
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { exists: boolean; blockTimestampThreshold: bigint }],
    'view'
  >;
  getFunction(nameOrSignature: 'currentExchangeUpgrade'): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'currentGovernanceUpgrade'): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'currentIndexPriceAdaptersUpgrade',
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { exists: boolean; blockTimestampThreshold: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'currentInsuranceFundWalletUpgrade',
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newInsuranceFundWallet: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'currentMarketOverridesUpgradesByBaseAssetSymbolAndWallet',
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [boolean, OverridableMarketFieldsStructOutput, bigint] & {
        exists: boolean;
        newMarketOverrides: OverridableMarketFieldsStructOutput;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'currentOraclePriceAdapterUpgrade',
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        exists: boolean;
        newContract: string;
        blockTimestampThreshold: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'custodian',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'finalizeAssetMigratorUpgrade',
  ): TypedContractMethod<[newAssetMigrator: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'finalizeBridgeAdaptersUpgrade',
  ): TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'finalizeExchangeUpgrade',
  ): TypedContractMethod<[newExchange: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'finalizeGovernanceUpgrade',
  ): TypedContractMethod<[newGovernance: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'finalizeIndexPriceAdaptersUpgrade',
  ): TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'finalizeInsuranceFundWalletUpgrade',
  ): TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'finalizeMarketOverridesUpgrade',
  ): TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'finalizeOraclePriceAdapterUpgrade',
  ): TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateAssetMigratorUpgrade',
  ): TypedContractMethod<[newAssetMigrator: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initiateBridgeAdaptersUpgrade',
  ): TypedContractMethod<
    [newBridgeAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateExchangeUpgrade',
  ): TypedContractMethod<[newExchange: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initiateGovernanceUpgrade',
  ): TypedContractMethod<[newGovernance: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initiateIndexPriceAdaptersUpgrade',
  ): TypedContractMethod<
    [newIndexPriceAdapters: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateInsuranceFundWalletUpgrade',
  ): TypedContractMethod<
    [newInsuranceFundWallet: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateMarketOverridesUpgrade',
  ): TypedContractMethod<
    [
      baseAssetSymbol: string,
      overridableFields: OverridableMarketFieldsStruct,
      wallet: AddressLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateOraclePriceAdapterUpgrade',
  ): TypedContractMethod<
    [newOraclePriceAdapter: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'ownerWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeAdmin',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeOwner',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAdmin',
  ): TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setCustodian',
  ): TypedContractMethod<[newCustodian: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setOwner',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'AssetMigratorCleared',
  ): TypedContractEvent<
    AssetMigratorClearedEvent.InputTuple,
    AssetMigratorClearedEvent.OutputTuple,
    AssetMigratorClearedEvent.OutputObject
  >;
  getEvent(
    key: 'AssetMigratorUpgradeCanceled',
  ): TypedContractEvent<
    AssetMigratorUpgradeCanceledEvent.InputTuple,
    AssetMigratorUpgradeCanceledEvent.OutputTuple,
    AssetMigratorUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'AssetMigratorUpgradeFinalized',
  ): TypedContractEvent<
    AssetMigratorUpgradeFinalizedEvent.InputTuple,
    AssetMigratorUpgradeFinalizedEvent.OutputTuple,
    AssetMigratorUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'AssetMigratorUpgradeInitiated',
  ): TypedContractEvent<
    AssetMigratorUpgradeInitiatedEvent.InputTuple,
    AssetMigratorUpgradeInitiatedEvent.OutputTuple,
    AssetMigratorUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'BridgeAdaptersUpgradeCanceled',
  ): TypedContractEvent<
    BridgeAdaptersUpgradeCanceledEvent.InputTuple,
    BridgeAdaptersUpgradeCanceledEvent.OutputTuple,
    BridgeAdaptersUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'BridgeAdaptersUpgradeFinalized',
  ): TypedContractEvent<
    BridgeAdaptersUpgradeFinalizedEvent.InputTuple,
    BridgeAdaptersUpgradeFinalizedEvent.OutputTuple,
    BridgeAdaptersUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'BridgeAdaptersUpgradeInitiated',
  ): TypedContractEvent<
    BridgeAdaptersUpgradeInitiatedEvent.InputTuple,
    BridgeAdaptersUpgradeInitiatedEvent.OutputTuple,
    BridgeAdaptersUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'ExchangeUpgradeCanceled',
  ): TypedContractEvent<
    ExchangeUpgradeCanceledEvent.InputTuple,
    ExchangeUpgradeCanceledEvent.OutputTuple,
    ExchangeUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'ExchangeUpgradeFinalized',
  ): TypedContractEvent<
    ExchangeUpgradeFinalizedEvent.InputTuple,
    ExchangeUpgradeFinalizedEvent.OutputTuple,
    ExchangeUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'ExchangeUpgradeInitiated',
  ): TypedContractEvent<
    ExchangeUpgradeInitiatedEvent.InputTuple,
    ExchangeUpgradeInitiatedEvent.OutputTuple,
    ExchangeUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'GovernanceUpgradeCanceled',
  ): TypedContractEvent<
    GovernanceUpgradeCanceledEvent.InputTuple,
    GovernanceUpgradeCanceledEvent.OutputTuple,
    GovernanceUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'GovernanceUpgradeFinalized',
  ): TypedContractEvent<
    GovernanceUpgradeFinalizedEvent.InputTuple,
    GovernanceUpgradeFinalizedEvent.OutputTuple,
    GovernanceUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'GovernanceUpgradeInitiated',
  ): TypedContractEvent<
    GovernanceUpgradeInitiatedEvent.InputTuple,
    GovernanceUpgradeInitiatedEvent.OutputTuple,
    GovernanceUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'IndexPriceAdaptersUpgradeCanceled',
  ): TypedContractEvent<
    IndexPriceAdaptersUpgradeCanceledEvent.InputTuple,
    IndexPriceAdaptersUpgradeCanceledEvent.OutputTuple,
    IndexPriceAdaptersUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'IndexPriceAdaptersUpgradeFinalized',
  ): TypedContractEvent<
    IndexPriceAdaptersUpgradeFinalizedEvent.InputTuple,
    IndexPriceAdaptersUpgradeFinalizedEvent.OutputTuple,
    IndexPriceAdaptersUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'IndexPriceAdaptersUpgradeInitiated',
  ): TypedContractEvent<
    IndexPriceAdaptersUpgradeInitiatedEvent.InputTuple,
    IndexPriceAdaptersUpgradeInitiatedEvent.OutputTuple,
    IndexPriceAdaptersUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'InsuranceFundWalletUpgradeCanceled',
  ): TypedContractEvent<
    InsuranceFundWalletUpgradeCanceledEvent.InputTuple,
    InsuranceFundWalletUpgradeCanceledEvent.OutputTuple,
    InsuranceFundWalletUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'InsuranceFundWalletUpgradeFinalized',
  ): TypedContractEvent<
    InsuranceFundWalletUpgradeFinalizedEvent.InputTuple,
    InsuranceFundWalletUpgradeFinalizedEvent.OutputTuple,
    InsuranceFundWalletUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'InsuranceFundWalletUpgradeInitiated',
  ): TypedContractEvent<
    InsuranceFundWalletUpgradeInitiatedEvent.InputTuple,
    InsuranceFundWalletUpgradeInitiatedEvent.OutputTuple,
    InsuranceFundWalletUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketOverridesUpgradeCanceled',
  ): TypedContractEvent<
    MarketOverridesUpgradeCanceledEvent.InputTuple,
    MarketOverridesUpgradeCanceledEvent.OutputTuple,
    MarketOverridesUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'MarketOverridesUpgradeFinalized',
  ): TypedContractEvent<
    MarketOverridesUpgradeFinalizedEvent.InputTuple,
    MarketOverridesUpgradeFinalizedEvent.OutputTuple,
    MarketOverridesUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketOverridesUpgradeInitiated',
  ): TypedContractEvent<
    MarketOverridesUpgradeInitiatedEvent.InputTuple,
    MarketOverridesUpgradeInitiatedEvent.OutputTuple,
    MarketOverridesUpgradeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: 'OraclePriceAdapterUpgradeCanceled',
  ): TypedContractEvent<
    OraclePriceAdapterUpgradeCanceledEvent.InputTuple,
    OraclePriceAdapterUpgradeCanceledEvent.OutputTuple,
    OraclePriceAdapterUpgradeCanceledEvent.OutputObject
  >;
  getEvent(
    key: 'OraclePriceAdapterUpgradeFinalized',
  ): TypedContractEvent<
    OraclePriceAdapterUpgradeFinalizedEvent.InputTuple,
    OraclePriceAdapterUpgradeFinalizedEvent.OutputTuple,
    OraclePriceAdapterUpgradeFinalizedEvent.OutputObject
  >;
  getEvent(
    key: 'OraclePriceAdapterUpgradeInitiated',
  ): TypedContractEvent<
    OraclePriceAdapterUpgradeInitiatedEvent.InputTuple,
    OraclePriceAdapterUpgradeInitiatedEvent.OutputTuple,
    OraclePriceAdapterUpgradeInitiatedEvent.OutputObject
  >;

  filters: {
    'AssetMigratorCleared(address,address)': TypedContractEvent<
      AssetMigratorClearedEvent.InputTuple,
      AssetMigratorClearedEvent.OutputTuple,
      AssetMigratorClearedEvent.OutputObject
    >;
    AssetMigratorCleared: TypedContractEvent<
      AssetMigratorClearedEvent.InputTuple,
      AssetMigratorClearedEvent.OutputTuple,
      AssetMigratorClearedEvent.OutputObject
    >;

    'AssetMigratorUpgradeCanceled(address,address)': TypedContractEvent<
      AssetMigratorUpgradeCanceledEvent.InputTuple,
      AssetMigratorUpgradeCanceledEvent.OutputTuple,
      AssetMigratorUpgradeCanceledEvent.OutputObject
    >;
    AssetMigratorUpgradeCanceled: TypedContractEvent<
      AssetMigratorUpgradeCanceledEvent.InputTuple,
      AssetMigratorUpgradeCanceledEvent.OutputTuple,
      AssetMigratorUpgradeCanceledEvent.OutputObject
    >;

    'AssetMigratorUpgradeFinalized(address,address)': TypedContractEvent<
      AssetMigratorUpgradeFinalizedEvent.InputTuple,
      AssetMigratorUpgradeFinalizedEvent.OutputTuple,
      AssetMigratorUpgradeFinalizedEvent.OutputObject
    >;
    AssetMigratorUpgradeFinalized: TypedContractEvent<
      AssetMigratorUpgradeFinalizedEvent.InputTuple,
      AssetMigratorUpgradeFinalizedEvent.OutputTuple,
      AssetMigratorUpgradeFinalizedEvent.OutputObject
    >;

    'AssetMigratorUpgradeInitiated(address,address,uint256)': TypedContractEvent<
      AssetMigratorUpgradeInitiatedEvent.InputTuple,
      AssetMigratorUpgradeInitiatedEvent.OutputTuple,
      AssetMigratorUpgradeInitiatedEvent.OutputObject
    >;
    AssetMigratorUpgradeInitiated: TypedContractEvent<
      AssetMigratorUpgradeInitiatedEvent.InputTuple,
      AssetMigratorUpgradeInitiatedEvent.OutputTuple,
      AssetMigratorUpgradeInitiatedEvent.OutputObject
    >;

    'BridgeAdaptersUpgradeCanceled()': TypedContractEvent<
      BridgeAdaptersUpgradeCanceledEvent.InputTuple,
      BridgeAdaptersUpgradeCanceledEvent.OutputTuple,
      BridgeAdaptersUpgradeCanceledEvent.OutputObject
    >;
    BridgeAdaptersUpgradeCanceled: TypedContractEvent<
      BridgeAdaptersUpgradeCanceledEvent.InputTuple,
      BridgeAdaptersUpgradeCanceledEvent.OutputTuple,
      BridgeAdaptersUpgradeCanceledEvent.OutputObject
    >;

    'BridgeAdaptersUpgradeFinalized(address[])': TypedContractEvent<
      BridgeAdaptersUpgradeFinalizedEvent.InputTuple,
      BridgeAdaptersUpgradeFinalizedEvent.OutputTuple,
      BridgeAdaptersUpgradeFinalizedEvent.OutputObject
    >;
    BridgeAdaptersUpgradeFinalized: TypedContractEvent<
      BridgeAdaptersUpgradeFinalizedEvent.InputTuple,
      BridgeAdaptersUpgradeFinalizedEvent.OutputTuple,
      BridgeAdaptersUpgradeFinalizedEvent.OutputObject
    >;

    'BridgeAdaptersUpgradeInitiated(address[],uint256)': TypedContractEvent<
      BridgeAdaptersUpgradeInitiatedEvent.InputTuple,
      BridgeAdaptersUpgradeInitiatedEvent.OutputTuple,
      BridgeAdaptersUpgradeInitiatedEvent.OutputObject
    >;
    BridgeAdaptersUpgradeInitiated: TypedContractEvent<
      BridgeAdaptersUpgradeInitiatedEvent.InputTuple,
      BridgeAdaptersUpgradeInitiatedEvent.OutputTuple,
      BridgeAdaptersUpgradeInitiatedEvent.OutputObject
    >;

    'ExchangeUpgradeCanceled(address,address)': TypedContractEvent<
      ExchangeUpgradeCanceledEvent.InputTuple,
      ExchangeUpgradeCanceledEvent.OutputTuple,
      ExchangeUpgradeCanceledEvent.OutputObject
    >;
    ExchangeUpgradeCanceled: TypedContractEvent<
      ExchangeUpgradeCanceledEvent.InputTuple,
      ExchangeUpgradeCanceledEvent.OutputTuple,
      ExchangeUpgradeCanceledEvent.OutputObject
    >;

    'ExchangeUpgradeFinalized(address,address)': TypedContractEvent<
      ExchangeUpgradeFinalizedEvent.InputTuple,
      ExchangeUpgradeFinalizedEvent.OutputTuple,
      ExchangeUpgradeFinalizedEvent.OutputObject
    >;
    ExchangeUpgradeFinalized: TypedContractEvent<
      ExchangeUpgradeFinalizedEvent.InputTuple,
      ExchangeUpgradeFinalizedEvent.OutputTuple,
      ExchangeUpgradeFinalizedEvent.OutputObject
    >;

    'ExchangeUpgradeInitiated(address,address,uint256)': TypedContractEvent<
      ExchangeUpgradeInitiatedEvent.InputTuple,
      ExchangeUpgradeInitiatedEvent.OutputTuple,
      ExchangeUpgradeInitiatedEvent.OutputObject
    >;
    ExchangeUpgradeInitiated: TypedContractEvent<
      ExchangeUpgradeInitiatedEvent.InputTuple,
      ExchangeUpgradeInitiatedEvent.OutputTuple,
      ExchangeUpgradeInitiatedEvent.OutputObject
    >;

    'GovernanceUpgradeCanceled(address,address)': TypedContractEvent<
      GovernanceUpgradeCanceledEvent.InputTuple,
      GovernanceUpgradeCanceledEvent.OutputTuple,
      GovernanceUpgradeCanceledEvent.OutputObject
    >;
    GovernanceUpgradeCanceled: TypedContractEvent<
      GovernanceUpgradeCanceledEvent.InputTuple,
      GovernanceUpgradeCanceledEvent.OutputTuple,
      GovernanceUpgradeCanceledEvent.OutputObject
    >;

    'GovernanceUpgradeFinalized(address,address)': TypedContractEvent<
      GovernanceUpgradeFinalizedEvent.InputTuple,
      GovernanceUpgradeFinalizedEvent.OutputTuple,
      GovernanceUpgradeFinalizedEvent.OutputObject
    >;
    GovernanceUpgradeFinalized: TypedContractEvent<
      GovernanceUpgradeFinalizedEvent.InputTuple,
      GovernanceUpgradeFinalizedEvent.OutputTuple,
      GovernanceUpgradeFinalizedEvent.OutputObject
    >;

    'GovernanceUpgradeInitiated(address,address,uint256)': TypedContractEvent<
      GovernanceUpgradeInitiatedEvent.InputTuple,
      GovernanceUpgradeInitiatedEvent.OutputTuple,
      GovernanceUpgradeInitiatedEvent.OutputObject
    >;
    GovernanceUpgradeInitiated: TypedContractEvent<
      GovernanceUpgradeInitiatedEvent.InputTuple,
      GovernanceUpgradeInitiatedEvent.OutputTuple,
      GovernanceUpgradeInitiatedEvent.OutputObject
    >;

    'IndexPriceAdaptersUpgradeCanceled()': TypedContractEvent<
      IndexPriceAdaptersUpgradeCanceledEvent.InputTuple,
      IndexPriceAdaptersUpgradeCanceledEvent.OutputTuple,
      IndexPriceAdaptersUpgradeCanceledEvent.OutputObject
    >;
    IndexPriceAdaptersUpgradeCanceled: TypedContractEvent<
      IndexPriceAdaptersUpgradeCanceledEvent.InputTuple,
      IndexPriceAdaptersUpgradeCanceledEvent.OutputTuple,
      IndexPriceAdaptersUpgradeCanceledEvent.OutputObject
    >;

    'IndexPriceAdaptersUpgradeFinalized(address[])': TypedContractEvent<
      IndexPriceAdaptersUpgradeFinalizedEvent.InputTuple,
      IndexPriceAdaptersUpgradeFinalizedEvent.OutputTuple,
      IndexPriceAdaptersUpgradeFinalizedEvent.OutputObject
    >;
    IndexPriceAdaptersUpgradeFinalized: TypedContractEvent<
      IndexPriceAdaptersUpgradeFinalizedEvent.InputTuple,
      IndexPriceAdaptersUpgradeFinalizedEvent.OutputTuple,
      IndexPriceAdaptersUpgradeFinalizedEvent.OutputObject
    >;

    'IndexPriceAdaptersUpgradeInitiated(address[],uint256)': TypedContractEvent<
      IndexPriceAdaptersUpgradeInitiatedEvent.InputTuple,
      IndexPriceAdaptersUpgradeInitiatedEvent.OutputTuple,
      IndexPriceAdaptersUpgradeInitiatedEvent.OutputObject
    >;
    IndexPriceAdaptersUpgradeInitiated: TypedContractEvent<
      IndexPriceAdaptersUpgradeInitiatedEvent.InputTuple,
      IndexPriceAdaptersUpgradeInitiatedEvent.OutputTuple,
      IndexPriceAdaptersUpgradeInitiatedEvent.OutputObject
    >;

    'InsuranceFundWalletUpgradeCanceled()': TypedContractEvent<
      InsuranceFundWalletUpgradeCanceledEvent.InputTuple,
      InsuranceFundWalletUpgradeCanceledEvent.OutputTuple,
      InsuranceFundWalletUpgradeCanceledEvent.OutputObject
    >;
    InsuranceFundWalletUpgradeCanceled: TypedContractEvent<
      InsuranceFundWalletUpgradeCanceledEvent.InputTuple,
      InsuranceFundWalletUpgradeCanceledEvent.OutputTuple,
      InsuranceFundWalletUpgradeCanceledEvent.OutputObject
    >;

    'InsuranceFundWalletUpgradeFinalized(address)': TypedContractEvent<
      InsuranceFundWalletUpgradeFinalizedEvent.InputTuple,
      InsuranceFundWalletUpgradeFinalizedEvent.OutputTuple,
      InsuranceFundWalletUpgradeFinalizedEvent.OutputObject
    >;
    InsuranceFundWalletUpgradeFinalized: TypedContractEvent<
      InsuranceFundWalletUpgradeFinalizedEvent.InputTuple,
      InsuranceFundWalletUpgradeFinalizedEvent.OutputTuple,
      InsuranceFundWalletUpgradeFinalizedEvent.OutputObject
    >;

    'InsuranceFundWalletUpgradeInitiated(address,uint256)': TypedContractEvent<
      InsuranceFundWalletUpgradeInitiatedEvent.InputTuple,
      InsuranceFundWalletUpgradeInitiatedEvent.OutputTuple,
      InsuranceFundWalletUpgradeInitiatedEvent.OutputObject
    >;
    InsuranceFundWalletUpgradeInitiated: TypedContractEvent<
      InsuranceFundWalletUpgradeInitiatedEvent.InputTuple,
      InsuranceFundWalletUpgradeInitiatedEvent.OutputTuple,
      InsuranceFundWalletUpgradeInitiatedEvent.OutputObject
    >;

    'MarketOverridesUpgradeCanceled()': TypedContractEvent<
      MarketOverridesUpgradeCanceledEvent.InputTuple,
      MarketOverridesUpgradeCanceledEvent.OutputTuple,
      MarketOverridesUpgradeCanceledEvent.OutputObject
    >;
    MarketOverridesUpgradeCanceled: TypedContractEvent<
      MarketOverridesUpgradeCanceledEvent.InputTuple,
      MarketOverridesUpgradeCanceledEvent.OutputTuple,
      MarketOverridesUpgradeCanceledEvent.OutputObject
    >;

    'MarketOverridesUpgradeFinalized(string,address,tuple)': TypedContractEvent<
      MarketOverridesUpgradeFinalizedEvent.InputTuple,
      MarketOverridesUpgradeFinalizedEvent.OutputTuple,
      MarketOverridesUpgradeFinalizedEvent.OutputObject
    >;
    MarketOverridesUpgradeFinalized: TypedContractEvent<
      MarketOverridesUpgradeFinalizedEvent.InputTuple,
      MarketOverridesUpgradeFinalizedEvent.OutputTuple,
      MarketOverridesUpgradeFinalizedEvent.OutputObject
    >;

    'MarketOverridesUpgradeInitiated(string,address,tuple,uint256)': TypedContractEvent<
      MarketOverridesUpgradeInitiatedEvent.InputTuple,
      MarketOverridesUpgradeInitiatedEvent.OutputTuple,
      MarketOverridesUpgradeInitiatedEvent.OutputObject
    >;
    MarketOverridesUpgradeInitiated: TypedContractEvent<
      MarketOverridesUpgradeInitiatedEvent.InputTuple,
      MarketOverridesUpgradeInitiatedEvent.OutputTuple,
      MarketOverridesUpgradeInitiatedEvent.OutputObject
    >;

    'OraclePriceAdapterUpgradeCanceled()': TypedContractEvent<
      OraclePriceAdapterUpgradeCanceledEvent.InputTuple,
      OraclePriceAdapterUpgradeCanceledEvent.OutputTuple,
      OraclePriceAdapterUpgradeCanceledEvent.OutputObject
    >;
    OraclePriceAdapterUpgradeCanceled: TypedContractEvent<
      OraclePriceAdapterUpgradeCanceledEvent.InputTuple,
      OraclePriceAdapterUpgradeCanceledEvent.OutputTuple,
      OraclePriceAdapterUpgradeCanceledEvent.OutputObject
    >;

    'OraclePriceAdapterUpgradeFinalized(address)': TypedContractEvent<
      OraclePriceAdapterUpgradeFinalizedEvent.InputTuple,
      OraclePriceAdapterUpgradeFinalizedEvent.OutputTuple,
      OraclePriceAdapterUpgradeFinalizedEvent.OutputObject
    >;
    OraclePriceAdapterUpgradeFinalized: TypedContractEvent<
      OraclePriceAdapterUpgradeFinalizedEvent.InputTuple,
      OraclePriceAdapterUpgradeFinalizedEvent.OutputTuple,
      OraclePriceAdapterUpgradeFinalizedEvent.OutputObject
    >;

    'OraclePriceAdapterUpgradeInitiated(address,uint256)': TypedContractEvent<
      OraclePriceAdapterUpgradeInitiatedEvent.InputTuple,
      OraclePriceAdapterUpgradeInitiatedEvent.OutputTuple,
      OraclePriceAdapterUpgradeInitiatedEvent.OutputObject
    >;
    OraclePriceAdapterUpgradeInitiated: TypedContractEvent<
      OraclePriceAdapterUpgradeInitiatedEvent.InputTuple,
      OraclePriceAdapterUpgradeInitiatedEvent.OutputTuple,
      OraclePriceAdapterUpgradeInitiatedEvent.OutputObject
    >;
  };
}
