/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from '../../common';

export interface MarketAdminInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | 'IndexPricePublished'
      | 'MarketActivated'
      | 'MarketAdded'
      | 'MarketDeactivated',
  ): EventFragment;
}

export namespace IndexPricePublishedEvent {
  export type InputTuple = [
    baseAssetSymbol: string,
    timestampInMs: BigNumberish,
    price: BigNumberish,
  ];
  export type OutputTuple = [
    baseAssetSymbol: string,
    timestampInMs: bigint,
    price: bigint,
  ];
  export interface OutputObject {
    baseAssetSymbol: string;
    timestampInMs: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketActivatedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketAddedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketDeactivatedEvent {
  export type InputTuple = [baseAssetSymbol: string];
  export type OutputTuple = [baseAssetSymbol: string];
  export interface OutputObject {
    baseAssetSymbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): MarketAdmin;
  waitForDeployment(): Promise<this>;

  interface: MarketAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getEvent(
    key: 'IndexPricePublished',
  ): TypedContractEvent<
    IndexPricePublishedEvent.InputTuple,
    IndexPricePublishedEvent.OutputTuple,
    IndexPricePublishedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketActivated',
  ): TypedContractEvent<
    MarketActivatedEvent.InputTuple,
    MarketActivatedEvent.OutputTuple,
    MarketActivatedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketAdded',
  ): TypedContractEvent<
    MarketAddedEvent.InputTuple,
    MarketAddedEvent.OutputTuple,
    MarketAddedEvent.OutputObject
  >;
  getEvent(
    key: 'MarketDeactivated',
  ): TypedContractEvent<
    MarketDeactivatedEvent.InputTuple,
    MarketDeactivatedEvent.OutputTuple,
    MarketDeactivatedEvent.OutputObject
  >;

  filters: {
    'IndexPricePublished(string,uint64,uint64)': TypedContractEvent<
      IndexPricePublishedEvent.InputTuple,
      IndexPricePublishedEvent.OutputTuple,
      IndexPricePublishedEvent.OutputObject
    >;
    IndexPricePublished: TypedContractEvent<
      IndexPricePublishedEvent.InputTuple,
      IndexPricePublishedEvent.OutputTuple,
      IndexPricePublishedEvent.OutputObject
    >;

    'MarketActivated(string)': TypedContractEvent<
      MarketActivatedEvent.InputTuple,
      MarketActivatedEvent.OutputTuple,
      MarketActivatedEvent.OutputObject
    >;
    MarketActivated: TypedContractEvent<
      MarketActivatedEvent.InputTuple,
      MarketActivatedEvent.OutputTuple,
      MarketActivatedEvent.OutputObject
    >;

    'MarketAdded(string)': TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;
    MarketAdded: TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;

    'MarketDeactivated(string)': TypedContractEvent<
      MarketDeactivatedEvent.InputTuple,
      MarketDeactivatedEvent.OutputTuple,
      MarketDeactivatedEvent.OutputObject
    >;
    MarketDeactivated: TypedContractEvent<
      MarketDeactivatedEvent.InputTuple,
      MarketDeactivatedEvent.OutputTuple,
      MarketDeactivatedEvent.OutputObject
    >;
  };
}
