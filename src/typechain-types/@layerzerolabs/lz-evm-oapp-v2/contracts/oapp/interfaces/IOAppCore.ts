/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export interface IOAppCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'endpoint'
      | 'oAppVersion'
      | 'peers'
      | 'setDelegate'
      | 'setPeer',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'PeerSet'): EventFragment;

  encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'oAppVersion',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'peers', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setDelegate',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPeer',
    values: [BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'oAppVersion',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'peers', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDelegate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setPeer', data: BytesLike): Result;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOAppCore extends BaseContract {
  connect(runner?: ContractRunner | null): IOAppCore;
  waitForDeployment(): Promise<this>;

  interface: IOAppCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  endpoint: TypedContractMethod<[], [string], 'view'>;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    'view'
  >;

  peers: TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    'nonpayable'
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'endpoint',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'oAppVersion',
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'peers',
  ): TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'setDelegate',
  ): TypedContractMethod<[_delegate: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setPeer',
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'PeerSet',
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;

  filters: {
    'PeerSet(uint32,bytes32)': TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
  };
}
