/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export type SetConfigParamStruct = {
  eid: BigNumberish;
  configType: BigNumberish;
  config: BytesLike;
};

export type SetConfigParamStructOutput = [
  eid: bigint,
  configType: bigint,
  config: string,
] & { eid: bigint; configType: bigint; config: string };

export interface IMessageLibManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'defaultReceiveLibrary'
      | 'defaultReceiveLibraryTimeout'
      | 'defaultSendLibrary'
      | 'getConfig'
      | 'getReceiveLibrary'
      | 'getRegisteredLibraries'
      | 'getSendLibrary'
      | 'isDefaultSendLibrary'
      | 'isRegisteredLibrary'
      | 'isSupportedEid'
      | 'isValidReceiveLibrary'
      | 'receiveLibraryTimeout'
      | 'registerLibrary'
      | 'setConfig'
      | 'setDefaultReceiveLibrary'
      | 'setDefaultReceiveLibraryTimeout'
      | 'setDefaultSendLibrary'
      | 'setReceiveLibrary'
      | 'setReceiveLibraryTimeout'
      | 'setSendLibrary',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'DefaultReceiveLibrarySet'
      | 'DefaultReceiveLibraryTimeoutSet'
      | 'DefaultSendLibrarySet'
      | 'LibraryRegistered'
      | 'ReceiveLibrarySet'
      | 'ReceiveLibraryTimeoutSet'
      | 'SendLibrarySet',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'defaultReceiveLibrary',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultReceiveLibraryTimeout',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultSendLibrary',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getConfig',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReceiveLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredLibraries',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getSendLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isDefaultSendLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isRegisteredLibrary',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSupportedEid',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidReceiveLibrary',
    values: [AddressLike, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveLibraryTimeout',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerLibrary',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [AddressLike, AddressLike, SetConfigParamStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultReceiveLibrary',
    values: [BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultReceiveLibraryTimeout',
    values: [BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultSendLibrary',
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setReceiveLibrary',
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setReceiveLibraryTimeout',
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSendLibrary',
    values: [AddressLike, BigNumberish, AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'defaultReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredLibraries',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isDefaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isRegisteredLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedEid',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSendLibrary',
    data: BytesLike,
  ): Result;
}

export namespace DefaultReceiveLibrarySetEvent {
  export type InputTuple = [eid: BigNumberish, newLib: AddressLike];
  export type OutputTuple = [eid: bigint, newLib: string];
  export interface OutputObject {
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultReceiveLibraryTimeoutSetEvent {
  export type InputTuple = [
    eid: BigNumberish,
    oldLib: AddressLike,
    expiry: BigNumberish,
  ];
  export type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
  export interface OutputObject {
    eid: bigint;
    oldLib: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultSendLibrarySetEvent {
  export type InputTuple = [eid: BigNumberish, newLib: AddressLike];
  export type OutputTuple = [eid: bigint, newLib: string];
  export interface OutputObject {
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LibraryRegisteredEvent {
  export type InputTuple = [newLib: AddressLike];
  export type OutputTuple = [newLib: string];
  export interface OutputObject {
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveLibrarySetEvent {
  export type InputTuple = [
    receiver: AddressLike,
    eid: BigNumberish,
    newLib: AddressLike,
  ];
  export type OutputTuple = [receiver: string, eid: bigint, newLib: string];
  export interface OutputObject {
    receiver: string;
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveLibraryTimeoutSetEvent {
  export type InputTuple = [
    receiver: AddressLike,
    eid: BigNumberish,
    oldLib: AddressLike,
    timeout: BigNumberish,
  ];
  export type OutputTuple = [
    receiver: string,
    eid: bigint,
    oldLib: string,
    timeout: bigint,
  ];
  export interface OutputObject {
    receiver: string;
    eid: bigint;
    oldLib: string;
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendLibrarySetEvent {
  export type InputTuple = [
    sender: AddressLike,
    eid: BigNumberish,
    newLib: AddressLike,
  ];
  export type OutputTuple = [sender: string, eid: bigint, newLib: string];
  export interface OutputObject {
    sender: string;
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMessageLibManager extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageLibManager;
  waitForDeployment(): Promise<this>;

  interface: IMessageLibManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  defaultReceiveLibrary: TypedContractMethod<
    [_eid: BigNumberish],
    [string],
    'view'
  >;

  defaultReceiveLibraryTimeout: TypedContractMethod<
    [_eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;

  defaultSendLibrary: TypedContractMethod<
    [_eid: BigNumberish],
    [string],
    'view'
  >;

  getConfig: TypedContractMethod<
    [
      _oapp: AddressLike,
      _lib: AddressLike,
      _eid: BigNumberish,
      _configType: BigNumberish,
    ],
    [string],
    'view'
  >;

  getReceiveLibrary: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, boolean] & { lib: string; isDefault: boolean }],
    'view'
  >;

  getRegisteredLibraries: TypedContractMethod<[], [string[]], 'view'>;

  getSendLibrary: TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [string],
    'view'
  >;

  isDefaultSendLibrary: TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [boolean],
    'view'
  >;

  isRegisteredLibrary: TypedContractMethod<
    [_lib: AddressLike],
    [boolean],
    'view'
  >;

  isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], 'view'>;

  isValidReceiveLibrary: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish, _lib: AddressLike],
    [boolean],
    'view'
  >;

  receiveLibraryTimeout: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;

  registerLibrary: TypedContractMethod<
    [_lib: AddressLike],
    [void],
    'nonpayable'
  >;

  setConfig: TypedContractMethod<
    [_oapp: AddressLike, _lib: AddressLike, _params: SetConfigParamStruct[]],
    [void],
    'nonpayable'
  >;

  setDefaultReceiveLibrary: TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike, _gracePeriod: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDefaultReceiveLibraryTimeout: TypedContractMethod<
    [_eid: BigNumberish, _lib: AddressLike, _expiry: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDefaultSendLibrary: TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;

  setReceiveLibrary: TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _newLib: AddressLike,
      _gracePeriod: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  setReceiveLibraryTimeout: TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _lib: AddressLike,
      _expiry: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  setSendLibrary: TypedContractMethod<
    [_oapp: AddressLike, _eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'defaultReceiveLibrary',
  ): TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'defaultReceiveLibraryTimeout',
  ): TypedContractMethod<
    [_eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'defaultSendLibrary',
  ): TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getConfig',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _lib: AddressLike,
      _eid: BigNumberish,
      _configType: BigNumberish,
    ],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getReceiveLibrary',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, boolean] & { lib: string; isDefault: boolean }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getRegisteredLibraries',
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getSendLibrary',
  ): TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isDefaultSendLibrary',
  ): TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isRegisteredLibrary',
  ): TypedContractMethod<[_lib: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isSupportedEid',
  ): TypedContractMethod<[_eid: BigNumberish], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidReceiveLibrary',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish, _lib: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'receiveLibraryTimeout',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'registerLibrary',
  ): TypedContractMethod<[_lib: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setConfig',
  ): TypedContractMethod<
    [_oapp: AddressLike, _lib: AddressLike, _params: SetConfigParamStruct[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultReceiveLibrary',
  ): TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike, _gracePeriod: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultReceiveLibraryTimeout',
  ): TypedContractMethod<
    [_eid: BigNumberish, _lib: AddressLike, _expiry: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultSendLibrary',
  ): TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setReceiveLibrary',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _newLib: AddressLike,
      _gracePeriod: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setReceiveLibraryTimeout',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _lib: AddressLike,
      _expiry: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setSendLibrary',
  ): TypedContractMethod<
    [_oapp: AddressLike, _eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'DefaultReceiveLibrarySet',
  ): TypedContractEvent<
    DefaultReceiveLibrarySetEvent.InputTuple,
    DefaultReceiveLibrarySetEvent.OutputTuple,
    DefaultReceiveLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'DefaultReceiveLibraryTimeoutSet',
  ): TypedContractEvent<
    DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
    DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
    DefaultReceiveLibraryTimeoutSetEvent.OutputObject
  >;
  getEvent(
    key: 'DefaultSendLibrarySet',
  ): TypedContractEvent<
    DefaultSendLibrarySetEvent.InputTuple,
    DefaultSendLibrarySetEvent.OutputTuple,
    DefaultSendLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'LibraryRegistered',
  ): TypedContractEvent<
    LibraryRegisteredEvent.InputTuple,
    LibraryRegisteredEvent.OutputTuple,
    LibraryRegisteredEvent.OutputObject
  >;
  getEvent(
    key: 'ReceiveLibrarySet',
  ): TypedContractEvent<
    ReceiveLibrarySetEvent.InputTuple,
    ReceiveLibrarySetEvent.OutputTuple,
    ReceiveLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'ReceiveLibraryTimeoutSet',
  ): TypedContractEvent<
    ReceiveLibraryTimeoutSetEvent.InputTuple,
    ReceiveLibraryTimeoutSetEvent.OutputTuple,
    ReceiveLibraryTimeoutSetEvent.OutputObject
  >;
  getEvent(
    key: 'SendLibrarySet',
  ): TypedContractEvent<
    SendLibrarySetEvent.InputTuple,
    SendLibrarySetEvent.OutputTuple,
    SendLibrarySetEvent.OutputObject
  >;

  filters: {
    'DefaultReceiveLibrarySet(uint32,address)': TypedContractEvent<
      DefaultReceiveLibrarySetEvent.InputTuple,
      DefaultReceiveLibrarySetEvent.OutputTuple,
      DefaultReceiveLibrarySetEvent.OutputObject
    >;
    DefaultReceiveLibrarySet: TypedContractEvent<
      DefaultReceiveLibrarySetEvent.InputTuple,
      DefaultReceiveLibrarySetEvent.OutputTuple,
      DefaultReceiveLibrarySetEvent.OutputObject
    >;

    'DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)': TypedContractEvent<
      DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputObject
    >;
    DefaultReceiveLibraryTimeoutSet: TypedContractEvent<
      DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputObject
    >;

    'DefaultSendLibrarySet(uint32,address)': TypedContractEvent<
      DefaultSendLibrarySetEvent.InputTuple,
      DefaultSendLibrarySetEvent.OutputTuple,
      DefaultSendLibrarySetEvent.OutputObject
    >;
    DefaultSendLibrarySet: TypedContractEvent<
      DefaultSendLibrarySetEvent.InputTuple,
      DefaultSendLibrarySetEvent.OutputTuple,
      DefaultSendLibrarySetEvent.OutputObject
    >;

    'LibraryRegistered(address)': TypedContractEvent<
      LibraryRegisteredEvent.InputTuple,
      LibraryRegisteredEvent.OutputTuple,
      LibraryRegisteredEvent.OutputObject
    >;
    LibraryRegistered: TypedContractEvent<
      LibraryRegisteredEvent.InputTuple,
      LibraryRegisteredEvent.OutputTuple,
      LibraryRegisteredEvent.OutputObject
    >;

    'ReceiveLibrarySet(address,uint32,address)': TypedContractEvent<
      ReceiveLibrarySetEvent.InputTuple,
      ReceiveLibrarySetEvent.OutputTuple,
      ReceiveLibrarySetEvent.OutputObject
    >;
    ReceiveLibrarySet: TypedContractEvent<
      ReceiveLibrarySetEvent.InputTuple,
      ReceiveLibrarySetEvent.OutputTuple,
      ReceiveLibrarySetEvent.OutputObject
    >;

    'ReceiveLibraryTimeoutSet(address,uint32,address,uint256)': TypedContractEvent<
      ReceiveLibraryTimeoutSetEvent.InputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputObject
    >;
    ReceiveLibraryTimeoutSet: TypedContractEvent<
      ReceiveLibraryTimeoutSetEvent.InputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputObject
    >;

    'SendLibrarySet(address,uint32,address)': TypedContractEvent<
      SendLibrarySetEvent.InputTuple,
      SendLibrarySetEvent.OutputTuple,
      SendLibrarySetEvent.OutputObject
    >;
    SendLibrarySet: TypedContractEvent<
      SendLibrarySetEvent.InputTuple,
      SendLibrarySetEvent.OutputTuple,
      SendLibrarySetEvent.OutputObject
    >;
  };
}
