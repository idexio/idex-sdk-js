/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export interface IMessagingChannelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'burn'
      | 'eid'
      | 'inboundNonce'
      | 'inboundPayloadHash'
      | 'lazyInboundNonce'
      | 'nextGuid'
      | 'nilify'
      | 'outboundNonce'
      | 'skip',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'InboundNonceSkipped'
      | 'PacketBurnt'
      | 'PacketNilified',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'burn',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'eid', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'inboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'inboundPayloadHash',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lazyInboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'nextGuid',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'nilify',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'outboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'skip',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eid', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'inboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inboundPayloadHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lazyInboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'nextGuid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nilify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'outboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'skip', data: BytesLike): Result;
}

export namespace InboundNonceSkippedEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketBurntEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
    payloadHash: BytesLike,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
    payloadHash: string,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketNilifiedEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
    payloadHash: BytesLike,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
    payloadHash: string,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMessagingChannel extends BaseContract {
  connect(runner?: ContractRunner | null): IMessagingChannel;
  waitForDeployment(): Promise<this>;

  interface: IMessagingChannelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  burn: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  eid: TypedContractMethod<[], [bigint], 'view'>;

  inboundNonce: TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;

  inboundPayloadHash: TypedContractMethod<
    [
      _receiver: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [string],
    'view'
  >;

  lazyInboundNonce: TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;

  nextGuid: TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [string],
    'view'
  >;

  nilify: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  outboundNonce: TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [bigint],
    'view'
  >;

  skip: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'burn',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'eid',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'inboundNonce',
  ): TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'inboundPayloadHash',
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'lazyInboundNonce',
  ): TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'nextGuid',
  ): TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'nilify',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'outboundNonce',
  ): TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'skip',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'InboundNonceSkipped',
  ): TypedContractEvent<
    InboundNonceSkippedEvent.InputTuple,
    InboundNonceSkippedEvent.OutputTuple,
    InboundNonceSkippedEvent.OutputObject
  >;
  getEvent(
    key: 'PacketBurnt',
  ): TypedContractEvent<
    PacketBurntEvent.InputTuple,
    PacketBurntEvent.OutputTuple,
    PacketBurntEvent.OutputObject
  >;
  getEvent(
    key: 'PacketNilified',
  ): TypedContractEvent<
    PacketNilifiedEvent.InputTuple,
    PacketNilifiedEvent.OutputTuple,
    PacketNilifiedEvent.OutputObject
  >;

  filters: {
    'InboundNonceSkipped(uint32,bytes32,address,uint64)': TypedContractEvent<
      InboundNonceSkippedEvent.InputTuple,
      InboundNonceSkippedEvent.OutputTuple,
      InboundNonceSkippedEvent.OutputObject
    >;
    InboundNonceSkipped: TypedContractEvent<
      InboundNonceSkippedEvent.InputTuple,
      InboundNonceSkippedEvent.OutputTuple,
      InboundNonceSkippedEvent.OutputObject
    >;

    'PacketBurnt(uint32,bytes32,address,uint64,bytes32)': TypedContractEvent<
      PacketBurntEvent.InputTuple,
      PacketBurntEvent.OutputTuple,
      PacketBurntEvent.OutputObject
    >;
    PacketBurnt: TypedContractEvent<
      PacketBurntEvent.InputTuple,
      PacketBurntEvent.OutputTuple,
      PacketBurntEvent.OutputObject
    >;

    'PacketNilified(uint32,bytes32,address,uint64,bytes32)': TypedContractEvent<
      PacketNilifiedEvent.InputTuple,
      PacketNilifiedEvent.OutputTuple,
      PacketNilifiedEvent.OutputObject
    >;
    PacketNilified: TypedContractEvent<
      PacketNilifiedEvent.InputTuple,
      PacketNilifiedEvent.OutputTuple,
      PacketNilifiedEvent.OutputObject
    >;
  };
}
