/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint,
] & { srcEid: bigint; sender: string; nonce: bigint };

export type MessagingParamsStruct = {
  dstEid: BigNumberish;
  receiver: BytesLike;
  message: BytesLike;
  options: BytesLike;
  payInLzToken: boolean;
};

export type MessagingParamsStructOutput = [
  dstEid: bigint,
  receiver: string,
  message: string,
  options: string,
  payInLzToken: boolean,
] & {
  dstEid: bigint;
  receiver: string;
  message: string;
  options: string;
  payInLzToken: boolean;
};

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint,
] & { nativeFee: bigint; lzTokenFee: bigint };

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  guid: string,
  nonce: bigint,
  fee: MessagingFeeStructOutput,
] & { guid: string; nonce: bigint; fee: MessagingFeeStructOutput };

export type SetConfigParamStruct = {
  eid: BigNumberish;
  configType: BigNumberish;
  config: BytesLike;
};

export type SetConfigParamStructOutput = [
  eid: bigint,
  configType: bigint,
  config: string,
] & { eid: bigint; configType: bigint; config: string };

export interface ILayerZeroEndpointV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'burn'
      | 'clear'
      | 'composeQueue'
      | 'defaultReceiveLibrary'
      | 'defaultReceiveLibraryTimeout'
      | 'defaultSendLibrary'
      | 'eid'
      | 'getConfig'
      | 'getReceiveLibrary'
      | 'getRegisteredLibraries'
      | 'getSendContext'
      | 'getSendLibrary'
      | 'inboundNonce'
      | 'inboundPayloadHash'
      | 'initializable'
      | 'isDefaultSendLibrary'
      | 'isRegisteredLibrary'
      | 'isSendingMessage'
      | 'isSupportedEid'
      | 'isValidReceiveLibrary'
      | 'lazyInboundNonce'
      | 'lzCompose'
      | 'lzReceive'
      | 'lzToken'
      | 'nativeToken'
      | 'nextGuid'
      | 'nilify'
      | 'outboundNonce'
      | 'quote'
      | 'receiveLibraryTimeout'
      | 'registerLibrary'
      | 'send'
      | 'sendCompose'
      | 'setConfig'
      | 'setDefaultReceiveLibrary'
      | 'setDefaultReceiveLibraryTimeout'
      | 'setDefaultSendLibrary'
      | 'setDelegate'
      | 'setLzToken'
      | 'setReceiveLibrary'
      | 'setReceiveLibraryTimeout'
      | 'setSendLibrary'
      | 'skip'
      | 'verifiable'
      | 'verify',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ComposeDelivered'
      | 'ComposeSent'
      | 'DefaultReceiveLibrarySet'
      | 'DefaultReceiveLibraryTimeoutSet'
      | 'DefaultSendLibrarySet'
      | 'DelegateSet'
      | 'InboundNonceSkipped'
      | 'LibraryRegistered'
      | 'LzComposeAlert'
      | 'LzReceiveAlert'
      | 'LzTokenSet'
      | 'PacketBurnt'
      | 'PacketDelivered'
      | 'PacketNilified'
      | 'PacketSent'
      | 'PacketVerified'
      | 'ReceiveLibrarySet'
      | 'ReceiveLibraryTimeoutSet'
      | 'SendLibrarySet',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'burn',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'clear',
    values: [AddressLike, OriginStruct, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'composeQueue',
    values: [AddressLike, AddressLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultReceiveLibrary',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultReceiveLibraryTimeout',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'defaultSendLibrary',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'eid', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getConfig',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReceiveLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredLibraries',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getSendContext',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getSendLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'inboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'inboundPayloadHash',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initializable',
    values: [OriginStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isDefaultSendLibrary',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isRegisteredLibrary',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSendingMessage',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isSupportedEid',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidReceiveLibrary',
    values: [AddressLike, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lazyInboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzCompose',
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzReceive',
    values: [OriginStruct, AddressLike, BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'lzToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nativeToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nextGuid',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'nilify',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'outboundNonce',
    values: [AddressLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quote',
    values: [MessagingParamsStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveLibraryTimeout',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerLibrary',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'send',
    values: [MessagingParamsStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendCompose',
    values: [AddressLike, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [AddressLike, AddressLike, SetConfigParamStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultReceiveLibrary',
    values: [BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultReceiveLibraryTimeout',
    values: [BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDefaultSendLibrary',
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDelegate',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLzToken',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setReceiveLibrary',
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setReceiveLibraryTimeout',
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSendLibrary',
    values: [AddressLike, BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'skip',
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'verifiable',
    values: [OriginStruct, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [OriginStruct, AddressLike, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clear', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'composeQueue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'defaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'eid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredLibraries',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSendContext',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inboundPayloadHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initializable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isDefaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isRegisteredLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSendingMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedEid',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lazyInboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lzCompose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lzToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nativeToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'nextGuid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nilify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'outboundNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'receiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendCompose',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDefaultSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDelegate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setLzToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setReceiveLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setReceiveLibraryTimeout',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSendLibrary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'skip', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifiable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
}

export namespace ComposeDeliveredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    guid: BytesLike,
    index: BigNumberish,
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    guid: string,
    index: bigint,
  ];
  export interface OutputObject {
    from: string;
    to: string;
    guid: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComposeSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    guid: BytesLike,
    index: BigNumberish,
    message: BytesLike,
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    guid: string,
    index: bigint,
    message: string,
  ];
  export interface OutputObject {
    from: string;
    to: string;
    guid: string;
    index: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultReceiveLibrarySetEvent {
  export type InputTuple = [eid: BigNumberish, newLib: AddressLike];
  export type OutputTuple = [eid: bigint, newLib: string];
  export interface OutputObject {
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultReceiveLibraryTimeoutSetEvent {
  export type InputTuple = [
    eid: BigNumberish,
    oldLib: AddressLike,
    expiry: BigNumberish,
  ];
  export type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
  export interface OutputObject {
    eid: bigint;
    oldLib: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultSendLibrarySetEvent {
  export type InputTuple = [eid: BigNumberish, newLib: AddressLike];
  export type OutputTuple = [eid: bigint, newLib: string];
  export interface OutputObject {
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateSetEvent {
  export type InputTuple = [sender: AddressLike, delegate: AddressLike];
  export type OutputTuple = [sender: string, delegate: string];
  export interface OutputObject {
    sender: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundNonceSkippedEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LibraryRegisteredEvent {
  export type InputTuple = [newLib: AddressLike];
  export type OutputTuple = [newLib: string];
  export interface OutputObject {
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LzComposeAlertEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    executor: AddressLike,
    guid: BytesLike,
    index: BigNumberish,
    gas: BigNumberish,
    value: BigNumberish,
    message: BytesLike,
    extraData: BytesLike,
    reason: BytesLike,
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    executor: string,
    guid: string,
    index: bigint,
    gas: bigint,
    value: bigint,
    message: string,
    extraData: string,
    reason: string,
  ];
  export interface OutputObject {
    from: string;
    to: string;
    executor: string;
    guid: string;
    index: bigint;
    gas: bigint;
    value: bigint;
    message: string;
    extraData: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LzReceiveAlertEvent {
  export type InputTuple = [
    receiver: AddressLike,
    executor: AddressLike,
    origin: OriginStruct,
    guid: BytesLike,
    gas: BigNumberish,
    value: BigNumberish,
    message: BytesLike,
    extraData: BytesLike,
    reason: BytesLike,
  ];
  export type OutputTuple = [
    receiver: string,
    executor: string,
    origin: OriginStructOutput,
    guid: string,
    gas: bigint,
    value: bigint,
    message: string,
    extraData: string,
    reason: string,
  ];
  export interface OutputObject {
    receiver: string;
    executor: string;
    origin: OriginStructOutput;
    guid: string;
    gas: bigint;
    value: bigint;
    message: string;
    extraData: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LzTokenSetEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketBurntEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
    payloadHash: BytesLike,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
    payloadHash: string,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketDeliveredEvent {
  export type InputTuple = [origin: OriginStruct, receiver: AddressLike];
  export type OutputTuple = [origin: OriginStructOutput, receiver: string];
  export interface OutputObject {
    origin: OriginStructOutput;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketNilifiedEvent {
  export type InputTuple = [
    srcEid: BigNumberish,
    sender: BytesLike,
    receiver: AddressLike,
    nonce: BigNumberish,
    payloadHash: BytesLike,
  ];
  export type OutputTuple = [
    srcEid: bigint,
    sender: string,
    receiver: string,
    nonce: bigint,
    payloadHash: string,
  ];
  export interface OutputObject {
    srcEid: bigint;
    sender: string;
    receiver: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketSentEvent {
  export type InputTuple = [
    encodedPayload: BytesLike,
    options: BytesLike,
    sendLibrary: AddressLike,
  ];
  export type OutputTuple = [
    encodedPayload: string,
    options: string,
    sendLibrary: string,
  ];
  export interface OutputObject {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketVerifiedEvent {
  export type InputTuple = [
    origin: OriginStruct,
    receiver: AddressLike,
    payloadHash: BytesLike,
  ];
  export type OutputTuple = [
    origin: OriginStructOutput,
    receiver: string,
    payloadHash: string,
  ];
  export interface OutputObject {
    origin: OriginStructOutput;
    receiver: string;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveLibrarySetEvent {
  export type InputTuple = [
    receiver: AddressLike,
    eid: BigNumberish,
    newLib: AddressLike,
  ];
  export type OutputTuple = [receiver: string, eid: bigint, newLib: string];
  export interface OutputObject {
    receiver: string;
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveLibraryTimeoutSetEvent {
  export type InputTuple = [
    receiver: AddressLike,
    eid: BigNumberish,
    oldLib: AddressLike,
    timeout: BigNumberish,
  ];
  export type OutputTuple = [
    receiver: string,
    eid: bigint,
    oldLib: string,
    timeout: bigint,
  ];
  export interface OutputObject {
    receiver: string;
    eid: bigint;
    oldLib: string;
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendLibrarySetEvent {
  export type InputTuple = [
    sender: AddressLike,
    eid: BigNumberish,
    newLib: AddressLike,
  ];
  export type OutputTuple = [sender: string, eid: bigint, newLib: string];
  export interface OutputObject {
    sender: string;
    eid: bigint;
    newLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILayerZeroEndpointV2 extends BaseContract {
  connect(runner?: ContractRunner | null): ILayerZeroEndpointV2;
  waitForDeployment(): Promise<this>;

  interface: ILayerZeroEndpointV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  burn: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  clear: TypedContractMethod<
    [
      _oapp: AddressLike,
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  composeQueue: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
    ],
    [string],
    'view'
  >;

  defaultReceiveLibrary: TypedContractMethod<
    [_eid: BigNumberish],
    [string],
    'view'
  >;

  defaultReceiveLibraryTimeout: TypedContractMethod<
    [_eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;

  defaultSendLibrary: TypedContractMethod<
    [_eid: BigNumberish],
    [string],
    'view'
  >;

  eid: TypedContractMethod<[], [bigint], 'view'>;

  getConfig: TypedContractMethod<
    [
      _oapp: AddressLike,
      _lib: AddressLike,
      _eid: BigNumberish,
      _configType: BigNumberish,
    ],
    [string],
    'view'
  >;

  getReceiveLibrary: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, boolean] & { lib: string; isDefault: boolean }],
    'view'
  >;

  getRegisteredLibraries: TypedContractMethod<[], [string[]], 'view'>;

  getSendContext: TypedContractMethod<
    [],
    [[bigint, string] & { dstEid: bigint; sender: string }],
    'view'
  >;

  getSendLibrary: TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [string],
    'view'
  >;

  inboundNonce: TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;

  inboundPayloadHash: TypedContractMethod<
    [
      _receiver: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [string],
    'view'
  >;

  initializable: TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    'view'
  >;

  isDefaultSendLibrary: TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [boolean],
    'view'
  >;

  isRegisteredLibrary: TypedContractMethod<
    [_lib: AddressLike],
    [boolean],
    'view'
  >;

  isSendingMessage: TypedContractMethod<[], [boolean], 'view'>;

  isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], 'view'>;

  isValidReceiveLibrary: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish, _lib: AddressLike],
    [boolean],
    'view'
  >;

  lazyInboundNonce: TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;

  lzCompose: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
    ],
    [void],
    'payable'
  >;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _receiver: AddressLike,
      _guid: BytesLike,
      _message: BytesLike,
      _extraData: BytesLike,
    ],
    [void],
    'payable'
  >;

  lzToken: TypedContractMethod<[], [string], 'view'>;

  nativeToken: TypedContractMethod<[], [string], 'view'>;

  nextGuid: TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [string],
    'view'
  >;

  nilify: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  outboundNonce: TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [bigint],
    'view'
  >;

  quote: TypedContractMethod<
    [_params: MessagingParamsStruct, _sender: AddressLike],
    [MessagingFeeStructOutput],
    'view'
  >;

  receiveLibraryTimeout: TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;

  registerLibrary: TypedContractMethod<
    [_lib: AddressLike],
    [void],
    'nonpayable'
  >;

  send: TypedContractMethod<
    [_params: MessagingParamsStruct, _refundAddress: AddressLike],
    [MessagingReceiptStructOutput],
    'payable'
  >;

  sendCompose: TypedContractMethod<
    [
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  setConfig: TypedContractMethod<
    [_oapp: AddressLike, _lib: AddressLike, _params: SetConfigParamStruct[]],
    [void],
    'nonpayable'
  >;

  setDefaultReceiveLibrary: TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike, _gracePeriod: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDefaultReceiveLibraryTimeout: TypedContractMethod<
    [_eid: BigNumberish, _lib: AddressLike, _expiry: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDefaultSendLibrary: TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    'nonpayable'
  >;

  setLzToken: TypedContractMethod<
    [_lzToken: AddressLike],
    [void],
    'nonpayable'
  >;

  setReceiveLibrary: TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _newLib: AddressLike,
      _gracePeriod: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  setReceiveLibraryTimeout: TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _lib: AddressLike,
      _expiry: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  setSendLibrary: TypedContractMethod<
    [_oapp: AddressLike, _eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;

  skip: TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  verifiable: TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    'view'
  >;

  verify: TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike, _payloadHash: BytesLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'burn',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'clear',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'composeQueue',
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
    ],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'defaultReceiveLibrary',
  ): TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'defaultReceiveLibraryTimeout',
  ): TypedContractMethod<
    [_eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'defaultSendLibrary',
  ): TypedContractMethod<[_eid: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'eid',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getConfig',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _lib: AddressLike,
      _eid: BigNumberish,
      _configType: BigNumberish,
    ],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getReceiveLibrary',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, boolean] & { lib: string; isDefault: boolean }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getRegisteredLibraries',
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getSendContext',
  ): TypedContractMethod<
    [],
    [[bigint, string] & { dstEid: bigint; sender: string }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getSendLibrary',
  ): TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'inboundNonce',
  ): TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'inboundPayloadHash',
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'initializable',
  ): TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isDefaultSendLibrary',
  ): TypedContractMethod<
    [_sender: AddressLike, _eid: BigNumberish],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isRegisteredLibrary',
  ): TypedContractMethod<[_lib: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isSendingMessage',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isSupportedEid',
  ): TypedContractMethod<[_eid: BigNumberish], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidReceiveLibrary',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish, _lib: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'lazyInboundNonce',
  ): TypedContractMethod<
    [_receiver: AddressLike, _srcEid: BigNumberish, _sender: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'lzCompose',
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'lzReceive',
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _receiver: AddressLike,
      _guid: BytesLike,
      _message: BytesLike,
      _extraData: BytesLike,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'lzToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'nativeToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'nextGuid',
  ): TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'nilify',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
      _payloadHash: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'outboundNonce',
  ): TypedContractMethod<
    [_sender: AddressLike, _dstEid: BigNumberish, _receiver: BytesLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'quote',
  ): TypedContractMethod<
    [_params: MessagingParamsStruct, _sender: AddressLike],
    [MessagingFeeStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'receiveLibraryTimeout',
  ): TypedContractMethod<
    [_receiver: AddressLike, _eid: BigNumberish],
    [[string, bigint] & { lib: string; expiry: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'registerLibrary',
  ): TypedContractMethod<[_lib: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'send',
  ): TypedContractMethod<
    [_params: MessagingParamsStruct, _refundAddress: AddressLike],
    [MessagingReceiptStructOutput],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'sendCompose',
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setConfig',
  ): TypedContractMethod<
    [_oapp: AddressLike, _lib: AddressLike, _params: SetConfigParamStruct[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultReceiveLibrary',
  ): TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike, _gracePeriod: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultReceiveLibraryTimeout',
  ): TypedContractMethod<
    [_eid: BigNumberish, _lib: AddressLike, _expiry: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDefaultSendLibrary',
  ): TypedContractMethod<
    [_eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setDelegate',
  ): TypedContractMethod<[_delegate: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setLzToken',
  ): TypedContractMethod<[_lzToken: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setReceiveLibrary',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _newLib: AddressLike,
      _gracePeriod: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setReceiveLibraryTimeout',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _eid: BigNumberish,
      _lib: AddressLike,
      _expiry: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setSendLibrary',
  ): TypedContractMethod<
    [_oapp: AddressLike, _eid: BigNumberish, _newLib: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'skip',
  ): TypedContractMethod<
    [
      _oapp: AddressLike,
      _srcEid: BigNumberish,
      _sender: BytesLike,
      _nonce: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'verifiable',
  ): TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'verify',
  ): TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike, _payloadHash: BytesLike],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'ComposeDelivered',
  ): TypedContractEvent<
    ComposeDeliveredEvent.InputTuple,
    ComposeDeliveredEvent.OutputTuple,
    ComposeDeliveredEvent.OutputObject
  >;
  getEvent(
    key: 'ComposeSent',
  ): TypedContractEvent<
    ComposeSentEvent.InputTuple,
    ComposeSentEvent.OutputTuple,
    ComposeSentEvent.OutputObject
  >;
  getEvent(
    key: 'DefaultReceiveLibrarySet',
  ): TypedContractEvent<
    DefaultReceiveLibrarySetEvent.InputTuple,
    DefaultReceiveLibrarySetEvent.OutputTuple,
    DefaultReceiveLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'DefaultReceiveLibraryTimeoutSet',
  ): TypedContractEvent<
    DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
    DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
    DefaultReceiveLibraryTimeoutSetEvent.OutputObject
  >;
  getEvent(
    key: 'DefaultSendLibrarySet',
  ): TypedContractEvent<
    DefaultSendLibrarySetEvent.InputTuple,
    DefaultSendLibrarySetEvent.OutputTuple,
    DefaultSendLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'DelegateSet',
  ): TypedContractEvent<
    DelegateSetEvent.InputTuple,
    DelegateSetEvent.OutputTuple,
    DelegateSetEvent.OutputObject
  >;
  getEvent(
    key: 'InboundNonceSkipped',
  ): TypedContractEvent<
    InboundNonceSkippedEvent.InputTuple,
    InboundNonceSkippedEvent.OutputTuple,
    InboundNonceSkippedEvent.OutputObject
  >;
  getEvent(
    key: 'LibraryRegistered',
  ): TypedContractEvent<
    LibraryRegisteredEvent.InputTuple,
    LibraryRegisteredEvent.OutputTuple,
    LibraryRegisteredEvent.OutputObject
  >;
  getEvent(
    key: 'LzComposeAlert',
  ): TypedContractEvent<
    LzComposeAlertEvent.InputTuple,
    LzComposeAlertEvent.OutputTuple,
    LzComposeAlertEvent.OutputObject
  >;
  getEvent(
    key: 'LzReceiveAlert',
  ): TypedContractEvent<
    LzReceiveAlertEvent.InputTuple,
    LzReceiveAlertEvent.OutputTuple,
    LzReceiveAlertEvent.OutputObject
  >;
  getEvent(
    key: 'LzTokenSet',
  ): TypedContractEvent<
    LzTokenSetEvent.InputTuple,
    LzTokenSetEvent.OutputTuple,
    LzTokenSetEvent.OutputObject
  >;
  getEvent(
    key: 'PacketBurnt',
  ): TypedContractEvent<
    PacketBurntEvent.InputTuple,
    PacketBurntEvent.OutputTuple,
    PacketBurntEvent.OutputObject
  >;
  getEvent(
    key: 'PacketDelivered',
  ): TypedContractEvent<
    PacketDeliveredEvent.InputTuple,
    PacketDeliveredEvent.OutputTuple,
    PacketDeliveredEvent.OutputObject
  >;
  getEvent(
    key: 'PacketNilified',
  ): TypedContractEvent<
    PacketNilifiedEvent.InputTuple,
    PacketNilifiedEvent.OutputTuple,
    PacketNilifiedEvent.OutputObject
  >;
  getEvent(
    key: 'PacketSent',
  ): TypedContractEvent<
    PacketSentEvent.InputTuple,
    PacketSentEvent.OutputTuple,
    PacketSentEvent.OutputObject
  >;
  getEvent(
    key: 'PacketVerified',
  ): TypedContractEvent<
    PacketVerifiedEvent.InputTuple,
    PacketVerifiedEvent.OutputTuple,
    PacketVerifiedEvent.OutputObject
  >;
  getEvent(
    key: 'ReceiveLibrarySet',
  ): TypedContractEvent<
    ReceiveLibrarySetEvent.InputTuple,
    ReceiveLibrarySetEvent.OutputTuple,
    ReceiveLibrarySetEvent.OutputObject
  >;
  getEvent(
    key: 'ReceiveLibraryTimeoutSet',
  ): TypedContractEvent<
    ReceiveLibraryTimeoutSetEvent.InputTuple,
    ReceiveLibraryTimeoutSetEvent.OutputTuple,
    ReceiveLibraryTimeoutSetEvent.OutputObject
  >;
  getEvent(
    key: 'SendLibrarySet',
  ): TypedContractEvent<
    SendLibrarySetEvent.InputTuple,
    SendLibrarySetEvent.OutputTuple,
    SendLibrarySetEvent.OutputObject
  >;

  filters: {
    'ComposeDelivered(address,address,bytes32,uint16)': TypedContractEvent<
      ComposeDeliveredEvent.InputTuple,
      ComposeDeliveredEvent.OutputTuple,
      ComposeDeliveredEvent.OutputObject
    >;
    ComposeDelivered: TypedContractEvent<
      ComposeDeliveredEvent.InputTuple,
      ComposeDeliveredEvent.OutputTuple,
      ComposeDeliveredEvent.OutputObject
    >;

    'ComposeSent(address,address,bytes32,uint16,bytes)': TypedContractEvent<
      ComposeSentEvent.InputTuple,
      ComposeSentEvent.OutputTuple,
      ComposeSentEvent.OutputObject
    >;
    ComposeSent: TypedContractEvent<
      ComposeSentEvent.InputTuple,
      ComposeSentEvent.OutputTuple,
      ComposeSentEvent.OutputObject
    >;

    'DefaultReceiveLibrarySet(uint32,address)': TypedContractEvent<
      DefaultReceiveLibrarySetEvent.InputTuple,
      DefaultReceiveLibrarySetEvent.OutputTuple,
      DefaultReceiveLibrarySetEvent.OutputObject
    >;
    DefaultReceiveLibrarySet: TypedContractEvent<
      DefaultReceiveLibrarySetEvent.InputTuple,
      DefaultReceiveLibrarySetEvent.OutputTuple,
      DefaultReceiveLibrarySetEvent.OutputObject
    >;

    'DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)': TypedContractEvent<
      DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputObject
    >;
    DefaultReceiveLibraryTimeoutSet: TypedContractEvent<
      DefaultReceiveLibraryTimeoutSetEvent.InputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputTuple,
      DefaultReceiveLibraryTimeoutSetEvent.OutputObject
    >;

    'DefaultSendLibrarySet(uint32,address)': TypedContractEvent<
      DefaultSendLibrarySetEvent.InputTuple,
      DefaultSendLibrarySetEvent.OutputTuple,
      DefaultSendLibrarySetEvent.OutputObject
    >;
    DefaultSendLibrarySet: TypedContractEvent<
      DefaultSendLibrarySetEvent.InputTuple,
      DefaultSendLibrarySetEvent.OutputTuple,
      DefaultSendLibrarySetEvent.OutputObject
    >;

    'DelegateSet(address,address)': TypedContractEvent<
      DelegateSetEvent.InputTuple,
      DelegateSetEvent.OutputTuple,
      DelegateSetEvent.OutputObject
    >;
    DelegateSet: TypedContractEvent<
      DelegateSetEvent.InputTuple,
      DelegateSetEvent.OutputTuple,
      DelegateSetEvent.OutputObject
    >;

    'InboundNonceSkipped(uint32,bytes32,address,uint64)': TypedContractEvent<
      InboundNonceSkippedEvent.InputTuple,
      InboundNonceSkippedEvent.OutputTuple,
      InboundNonceSkippedEvent.OutputObject
    >;
    InboundNonceSkipped: TypedContractEvent<
      InboundNonceSkippedEvent.InputTuple,
      InboundNonceSkippedEvent.OutputTuple,
      InboundNonceSkippedEvent.OutputObject
    >;

    'LibraryRegistered(address)': TypedContractEvent<
      LibraryRegisteredEvent.InputTuple,
      LibraryRegisteredEvent.OutputTuple,
      LibraryRegisteredEvent.OutputObject
    >;
    LibraryRegistered: TypedContractEvent<
      LibraryRegisteredEvent.InputTuple,
      LibraryRegisteredEvent.OutputTuple,
      LibraryRegisteredEvent.OutputObject
    >;

    'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)': TypedContractEvent<
      LzComposeAlertEvent.InputTuple,
      LzComposeAlertEvent.OutputTuple,
      LzComposeAlertEvent.OutputObject
    >;
    LzComposeAlert: TypedContractEvent<
      LzComposeAlertEvent.InputTuple,
      LzComposeAlertEvent.OutputTuple,
      LzComposeAlertEvent.OutputObject
    >;

    'LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)': TypedContractEvent<
      LzReceiveAlertEvent.InputTuple,
      LzReceiveAlertEvent.OutputTuple,
      LzReceiveAlertEvent.OutputObject
    >;
    LzReceiveAlert: TypedContractEvent<
      LzReceiveAlertEvent.InputTuple,
      LzReceiveAlertEvent.OutputTuple,
      LzReceiveAlertEvent.OutputObject
    >;

    'LzTokenSet(address)': TypedContractEvent<
      LzTokenSetEvent.InputTuple,
      LzTokenSetEvent.OutputTuple,
      LzTokenSetEvent.OutputObject
    >;
    LzTokenSet: TypedContractEvent<
      LzTokenSetEvent.InputTuple,
      LzTokenSetEvent.OutputTuple,
      LzTokenSetEvent.OutputObject
    >;

    'PacketBurnt(uint32,bytes32,address,uint64,bytes32)': TypedContractEvent<
      PacketBurntEvent.InputTuple,
      PacketBurntEvent.OutputTuple,
      PacketBurntEvent.OutputObject
    >;
    PacketBurnt: TypedContractEvent<
      PacketBurntEvent.InputTuple,
      PacketBurntEvent.OutputTuple,
      PacketBurntEvent.OutputObject
    >;

    'PacketDelivered(tuple,address)': TypedContractEvent<
      PacketDeliveredEvent.InputTuple,
      PacketDeliveredEvent.OutputTuple,
      PacketDeliveredEvent.OutputObject
    >;
    PacketDelivered: TypedContractEvent<
      PacketDeliveredEvent.InputTuple,
      PacketDeliveredEvent.OutputTuple,
      PacketDeliveredEvent.OutputObject
    >;

    'PacketNilified(uint32,bytes32,address,uint64,bytes32)': TypedContractEvent<
      PacketNilifiedEvent.InputTuple,
      PacketNilifiedEvent.OutputTuple,
      PacketNilifiedEvent.OutputObject
    >;
    PacketNilified: TypedContractEvent<
      PacketNilifiedEvent.InputTuple,
      PacketNilifiedEvent.OutputTuple,
      PacketNilifiedEvent.OutputObject
    >;

    'PacketSent(bytes,bytes,address)': TypedContractEvent<
      PacketSentEvent.InputTuple,
      PacketSentEvent.OutputTuple,
      PacketSentEvent.OutputObject
    >;
    PacketSent: TypedContractEvent<
      PacketSentEvent.InputTuple,
      PacketSentEvent.OutputTuple,
      PacketSentEvent.OutputObject
    >;

    'PacketVerified(tuple,address,bytes32)': TypedContractEvent<
      PacketVerifiedEvent.InputTuple,
      PacketVerifiedEvent.OutputTuple,
      PacketVerifiedEvent.OutputObject
    >;
    PacketVerified: TypedContractEvent<
      PacketVerifiedEvent.InputTuple,
      PacketVerifiedEvent.OutputTuple,
      PacketVerifiedEvent.OutputObject
    >;

    'ReceiveLibrarySet(address,uint32,address)': TypedContractEvent<
      ReceiveLibrarySetEvent.InputTuple,
      ReceiveLibrarySetEvent.OutputTuple,
      ReceiveLibrarySetEvent.OutputObject
    >;
    ReceiveLibrarySet: TypedContractEvent<
      ReceiveLibrarySetEvent.InputTuple,
      ReceiveLibrarySetEvent.OutputTuple,
      ReceiveLibrarySetEvent.OutputObject
    >;

    'ReceiveLibraryTimeoutSet(address,uint32,address,uint256)': TypedContractEvent<
      ReceiveLibraryTimeoutSetEvent.InputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputObject
    >;
    ReceiveLibraryTimeoutSet: TypedContractEvent<
      ReceiveLibraryTimeoutSetEvent.InputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputTuple,
      ReceiveLibraryTimeoutSetEvent.OutputObject
    >;

    'SendLibrarySet(address,uint32,address)': TypedContractEvent<
      SendLibrarySetEvent.InputTuple,
      SendLibrarySetEvent.OutputTuple,
      SendLibrarySetEvent.OutputObject
    >;
    SendLibrarySet: TypedContractEvent<
      SendLibrarySetEvent.InputTuple,
      SendLibrarySetEvent.OutputTuple,
      SendLibrarySetEvent.OutputObject
    >;
  };
}
