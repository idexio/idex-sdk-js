/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  MockPyth,
  MockPythInterface,
} from '../../../@pythnetwork/pyth-sdk-solidity/MockPyth';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_validTimePeriod',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_singleUpdateFeeInWei',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'InsufficientFee',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidArgument',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoFreshUpdate',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PriceFeedNotFound',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PriceFeedNotFoundWithinRange',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StalePrice',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint16',
        name: 'chainId',
        type: 'uint16',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'sequenceNumber',
        type: 'uint64',
      },
    ],
    name: 'BatchPriceFeedUpdate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'publishTime',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'int64',
        name: 'price',
        type: 'int64',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'conf',
        type: 'uint64',
      },
    ],
    name: 'PriceFeedUpdate',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'int64',
        name: 'price',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'conf',
        type: 'uint64',
      },
      {
        internalType: 'int32',
        name: 'expo',
        type: 'int32',
      },
      {
        internalType: 'int64',
        name: 'emaPrice',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'emaConf',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'publishTime',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'prevPublishTime',
        type: 'uint64',
      },
    ],
    name: 'createPriceFeedUpdateData',
    outputs: [
      {
        internalType: 'bytes',
        name: 'priceFeedData',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getEmaPrice',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'age',
        type: 'uint256',
      },
    ],
    name: 'getEmaPriceNoOlderThan',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getEmaPriceUnsafe',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getPrice',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'age',
        type: 'uint256',
      },
    ],
    name: 'getPriceNoOlderThan',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getPriceUnsafe',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
    ],
    name: 'getUpdateFee',
    outputs: [
      {
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getValidTimePeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'priceIds',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint64',
        name: 'minPublishTime',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'maxPublishTime',
        type: 'uint64',
      },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'id',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'price',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'emaPrice',
            type: 'tuple',
          },
        ],
        internalType: 'struct PythStructs.PriceFeed[]',
        name: 'feeds',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'priceIds',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint64',
        name: 'minPublishTime',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'maxPublishTime',
        type: 'uint64',
      },
    ],
    name: 'parsePriceFeedUpdatesUnique',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'id',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'price',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'emaPrice',
            type: 'tuple',
          },
        ],
        internalType: 'struct PythStructs.PriceFeed[]',
        name: 'feeds',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'priceFeedExists',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'queryPriceFeed',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'id',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'price',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'emaPrice',
            type: 'tuple',
          },
        ],
        internalType: 'struct PythStructs.PriceFeed',
        name: 'priceFeed',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
    ],
    name: 'updatePriceFeeds',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'priceIds',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint64[]',
        name: 'publishTimes',
        type: 'uint64[]',
      },
    ],
    name: 'updatePriceFeedsIfNecessary',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608034605657601f61163838819003918201601f19168301916001600160401b03831184841017605b578084926040948552833981010312605657602081519101516002556003556040516115c690816100728239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c90816331d98b3f14610c175781634716e9c514610959578163711a2e281461093a5781639474f45b146108f557816396834ad31461086f578163a4ae35e014610850578163accca7f914610529578163b5dcc911146104a3578163b5ec02611461044d578163b9256d28146103c7578163caaf43f114610379578163d47eed4514610314578163d9b81c3c14610160578163e18910a314610123575063ef9e5e28146100c757600080fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f57803567ffffffffffffffff811161011b576101189161011291369101610c66565b906112d5565b80f35b8280fd5b5080fd5b83903461011f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f576020906003549051908152f35b90503461011b576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011b57602435928360070b809403610311576044359067ffffffffffffffff9384831680930361011f57606435958660030b80970361011b57608435968760070b80980361030d5760a435908782168092036103095760c435918883168093036103055760e43593898516809503610301579188999a918460608095846102146110a7565b9d8e9d8e8d35905260209e8f8091019485515284510152825101525101528a8a01928351528883510152898251015251015261025586519585870190610d36565b61014090818601528452610160840195848710908711176102d5575084845281855282519182610180850152815b8381106102c05750508282016101a00152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b80829186016101a08382015191015201610283565b9060416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8680fd5b8580fd5b8480fd5b8380fd5b80fd5b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103115782359067ffffffffffffffff8211610311575061036b60209361037292369101610c66565b905061119a565b9051908152f35b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031157506103c56103bc6101209335611115565b91518092610d36565bf35b505060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f5767ffffffffffffffff813581811161030d576104129036908401610c66565b916024358181116103055761042a9036908601610c66565b91604435908111610301576101189561044591369101610c66565b949093610fb5565b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610311575061049a602092356000526000602052604060002054151590565b90519015158152f35b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031157506103c56104f26080936104e7610ee3565b506003549035610f08565b9151809260608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b83915061053536610cb1565b6105418598929861119a565b34106108285761055083611539565b9761055d8851998a610ea2565b8389527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061058a85611539565b01835b818110610810575050825b8481106105b0578851806105ac8c82610dbd565b0390f35b835b878110610608575b506105c5818b611551565b51516105d2828789610f76565b35036105e057600101610598565b8a89517f45805f5d000000000000000000000000000000000000000000000000000000008152fd5b61061a81898b9d98999a949c9b6111df565b810161014082820312610301578a8e8361064e8f94610120610640610647928e99611297565b9301610c9c565b948c611551565b528d6060908b8460209284846106648386611551565b510151015180996106758386611551565b51518152808652600293849120015410610728575b94505091505061069a9250611551565b51516106a78d8b8d610f76565b35146106c0575b505060010199979890969594996105b2565b67ffffffffffffffff9c9a9b939998979c8086169183831115938461071b575b508361070f575b5050506000036105ba5760019085610706848e999a9b959d9c9e611551565b5152908d6106ae565b161090508d80806106e7565b88831610159350386106e0565b8061073661073d9285611551565b5193611551565b51518d528c8352858d2095825187556001870193808401519485518154966fffffffffffffffff000000000000000095898786840151881b169267ffffffffffffffff958695898301519560809d8e977fffffffffffffffffffffffff00000000000000000000000000000000000000009a8b9173ffffffff000000000000000000000000000000009a1b8a169416911617171790550151908c01558460038c01970151978851968854958a0151871b1695890151901b1694169116171717905501519101558a8e38808f818d9161068a565b808b6020809361081e6110a7565b920101520161058d565b8887517f025dbdd4000000000000000000000000000000000000000000000000000000008152fd5b83903461011f576080906103c56104f261086936610e07565b90610f68565b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031157506103c560206108bc6080946108b5610ee3565b5035611115565b01519151809260608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031157506103c5816108bc6080946108b5610ee3565b83903461011f576080906103c56104f261095336610e07565b90610f08565b83915061096536610cb1565b6109718598929861119a565b34106108285761098083611539565b9761098d8851998a610ea2565b8389527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06109ba85611539565b01835b818110610bff575050825b8481106109dc578851806105ac8c82610dbd565b835b878110610a0c575b506109f1818b611551565b51516109fe828789610f76565b35036105e0576001016109c8565b610a1e81898b9d98999a949c9b6111df565b81016101408282031261030157610120610a3b610a429284611297565b9201610c9c565b50610a4d8b88611551565b5289898d606060208a848383610a638985611551565b510151015196610a738184611551565b51518d528c8452878d600293849120015410610b1f575b945050915050610a9a9250611551565b5151610aa78c8a8c610f76565b3514610abf575b5060010199979890969594996109de565b67ffffffffffffffff9b999a929897969b908082861611159182610b12575b505080610b0a575b6000036109e65760019085610b02848e999a9b959d9c9e611551565b515290610aae565b506001610ae6565b8616101590508d80610ade565b80610736610b2d9285611551565b51518c528b8352858c2095825187556001870193808401519485518154966fffffffffffffffff000000000000000095898786840151881b169267ffffffffffffffff958695898301519560809d8e977fffffffffffffffffffffffff00000000000000000000000000000000000000009a8b9173ffffffff000000000000000000000000000000009a1b8a169416911617171790550151908c01558460038c01970151978851968854958a0151871b1695890151901b169416911617171790550151910155898d8f808a8f80610a8a565b808b60208093610c0d6110a7565b92010152016109bd565b905082346103115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031157506103c56104f2608093610c5b610ee3565b506003549035610f68565b9181601f84011215610c975782359167ffffffffffffffff8311610c97576020808501948460051b010111610c9757565b600080fd5b359067ffffffffffffffff82168203610c9757565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610c975767ffffffffffffffff600435818111610c975782610cfb91600401610c66565b9390939260243590838211610c9757610d1691600401610c66565b929092916044358281168103610c9757916064359081168103610c975790565b9060a06040610dbb9380518452610d836020820151602086019060608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b015191019060608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b565b602090602060408183019282815285518094520193019160005b828110610de5575050505090565b909192938261012082610dfb6001948951610d36565b01950193929101610dd7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040910112610c97576004359060243590565b6080810190811067ffffffffffffffff821117610e5757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610e5757604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e5757604052565b60405190610ef082610e3b565b60006060838281528260208201528260408201520152565b610f25604091610f16610ee3565b50610f1f610ee3565b50611115565b015190610f36606083015142611572565b11610f3e5790565b60046040517f19abf40e000000000000000000000000000000000000000000000000000000008152fd5b610f25602091610f16610ee3565b9190811015610f865760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b92909385820361107d5760009160005b818110610ff65760046040517fde2c57fa000000000000000000000000000000000000000000000000000000008152fd5b611018611004828488610f76565b356000526000602052604060002054151590565b15801561103b575b61102c57600101610fc5565b5050505050610dbb92506112d5565b506060602061105461104e84868a610f76565b35611115565b01510151611063828a86610f76565b359067ffffffffffffffff82168092036103055710611020565b60046040517fa9cb9e0d000000000000000000000000000000000000000000000000000000008152fd5b604051906110b482610e86565b81600081526110c1610ee3565b602082015260406110d0610ee3565b910152565b906040516110e281610e3b565b60606001829480548060070b855267ffffffffffffffff8160401c16602086015260801c60030b60408501520154910152565b61111d6110a7565b50600081815280602052604081205415611170576040918152806020522061116860036040519261114d84610e86565b8054845261115d600182016110d5565b6020850152016110d5565b604082015290565b60046040517f14aebe68000000000000000000000000000000000000000000000000000000008152fd5b6002548181029181830414901517156111b05790565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9190811015610f865760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610c9757019081359167ffffffffffffffff8311610c97576020018236038113610c97579190565b9190826080910312610c975760405161125781610e3b565b809280358060070b8103610c9757825261127360208201610c9c565b602083015260408101358060030b8103610c97576040830152606090810135910152565b919061012083820312610c975760406110d08151926112b584610e86565b60a08496803586526112ca836020830161123f565b60208701520161123f565b91906112e08161119a565b341061150f5760005b818110611368575050905060015467ffffffffffffffff60018183167f943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b60408051848152836020820152a101908082116111b0577fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009116911617600155565b6113738183866111df565b8101919061012081840312610c975760019261138e91611297565b8051600052602060008152600260406000200154918181019260608451015181106113be575b50505050016112e9565b67ffffffffffffffff827fd06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec94606094516000526040600020918051978884555192600487855193818e850154978781015198604082015160801b73ffffffff0000000000000000000000000000000016907fffffffffffffffffffffffff00000000000000000000000000000000000000008c8a169116176fffffffffffffffff00000000000000008b60401b16171760018701550151600285015560406003850191015190815181546fffffffffffffffff00000000000000008985015160401b16907fffffffffffffffffffffffff00000000000000000000000000000000000000008c604087015160801b73ffffffff00000000000000000000000000000000169416911617171790550151910155836040519516855260070b90840152166040820152a2388080806113b4565b60046040517f025dbdd4000000000000000000000000000000000000000000000000000000008152fd5b67ffffffffffffffff8111610e575760051b60200190565b8051821015610f865760209160051b010190565b919082039182116111b057565b81811115611587579061158491611565565b90565b6115849161156556fea26469706673582212202160479fb0f3cddb3a74176f27e372a927393150dfeb5d70033cb41bc0fe92ee64736f6c63430008190033';

type MockPythConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPythConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPyth__factory extends ContractFactory {
  constructor(...args: MockPythConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _validTimePeriod: BigNumberish,
    _singleUpdateFeeInWei: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _validTimePeriod,
      _singleUpdateFeeInWei,
      overrides || {},
    );
  }
  override deploy(
    _validTimePeriod: BigNumberish,
    _singleUpdateFeeInWei: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(
      _validTimePeriod,
      _singleUpdateFeeInWei,
      overrides || {},
    ) as Promise<
      MockPyth & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPyth__factory {
    return super.connect(runner) as MockPyth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPythInterface {
    return new Interface(_abi) as MockPythInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockPyth {
    return new Contract(address, _abi, runner) as unknown as MockPyth;
  }
}
