/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  IOraclePriceAdapter,
  IOraclePriceAdapterInterface,
} from '../../../../contracts/libraries/Interfaces.sol/IOraclePriceAdapter';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'baseAssetSymbol',
        type: 'string',
      },
    ],
    name: 'loadPriceForBaseAssetSymbol',
    outputs: [
      {
        internalType: 'uint64',
        name: 'price',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IExchange',
        name: 'exchange',
        type: 'address',
      },
    ],
    name: 'setActive',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IOraclePriceAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IOraclePriceAdapterInterface {
    return new Interface(_abi) as IOraclePriceAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): IOraclePriceAdapter {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as IOraclePriceAdapter;
  }
}
