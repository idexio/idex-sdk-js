/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  IExchange,
  IExchangeInterface,
} from '../../../../contracts/libraries/Interfaces.sol/IExchange';

const _abi = [
  {
    inputs: [],
    name: 'custodian',
    outputs: [
      {
        internalType: 'contract ICustodian',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'quantityInAssetUnits',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'destinationWallet',
        type: 'address',
      },
    ],
    name: 'deposit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'depositIndex',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'dispatcherWallet',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'insuranceFundWallet',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'wallet',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'assetSymbol',
        type: 'string',
      },
    ],
    name: 'loadBalanceBySymbol',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'wallet',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'assetSymbol',
        type: 'string',
      },
    ],
    name: 'loadBalanceStructBySymbol',
    outputs: [
      {
        components: [
          {
            internalType: 'bool',
            name: 'isMigrated',
            type: 'bool',
          },
          {
            internalType: 'int64',
            name: 'balance',
            type: 'int64',
          },
          {
            internalType: 'int64',
            name: 'costBasis',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'lastUpdateTimestampInMs',
            type: 'uint64',
          },
        ],
        internalType: 'struct Balance',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'wallet',
        type: 'address',
      },
    ],
    name: 'loadBaseAssetSymbolsWithOpenPositionsByWallet',
    outputs: [
      {
        internalType: 'string[]',
        name: '',
        type: 'string[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'index',
        type: 'uint8',
      },
    ],
    name: 'loadMarket',
    outputs: [
      {
        components: [
          {
            internalType: 'bool',
            name: 'exists',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'string',
            name: 'baseAssetSymbol',
            type: 'string',
          },
          {
            internalType: 'uint64',
            name: 'indexPriceAtDeactivation',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'lastIndexPrice',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'lastIndexPriceTimestampInMs',
            type: 'uint64',
          },
          {
            components: [
              {
                internalType: 'uint64',
                name: 'initialMarginFraction',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'maintenanceMarginFraction',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'incrementalInitialMarginFraction',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'baselinePositionSize',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'incrementalPositionSize',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'maximumPositionSize',
                type: 'uint64',
              },
              {
                internalType: 'uint64',
                name: 'minimumPositionSize',
                type: 'uint64',
              },
            ],
            internalType: 'struct OverridableMarketFields',
            name: 'overridableFields',
            type: 'tuple',
          },
        ],
        internalType: 'struct Market',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'loadMarketsLength',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IBridgeAdapter[]',
        name: 'newBridgeAdapters',
        type: 'address[]',
      },
    ],
    name: 'setBridgeAdapters',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IIndexPriceAdapter[]',
        name: 'newIndexPriceAdapters',
        type: 'address[]',
      },
    ],
    name: 'setIndexPriceAdapters',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newInsuranceFundWallet',
        type: 'address',
      },
    ],
    name: 'setInsuranceFundWallet',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'baseAssetSymbol',
        type: 'string',
      },
      {
        components: [
          {
            internalType: 'uint64',
            name: 'initialMarginFraction',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'maintenanceMarginFraction',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'incrementalInitialMarginFraction',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'baselinePositionSize',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'incrementalPositionSize',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'maximumPositionSize',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'minimumPositionSize',
            type: 'uint64',
          },
        ],
        internalType: 'struct OverridableMarketFields',
        name: 'overridableFields',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: 'wallet',
        type: 'address',
      },
    ],
    name: 'setMarketOverrides',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IOraclePriceAdapter',
        name: 'newOraclePriceAdapter',
        type: 'address',
      },
    ],
    name: 'setOraclePriceAdapter',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IExchange__factory {
  static readonly abi = _abi;
  static createInterface(): IExchangeInterface {
    return new Interface(_abi) as IExchangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IExchange {
    return new Contract(address, _abi, runner) as unknown as IExchange;
  }
}
