/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  IIndexPriceAdapter,
  IIndexPriceAdapterInterface,
} from '../../../../contracts/libraries/Interfaces.sol/IIndexPriceAdapter';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IExchange',
        name: 'exchange',
        type: 'address',
      },
    ],
    name: 'setActive',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'payload',
        type: 'bytes',
      },
    ],
    name: 'validateIndexPricePayload',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'baseAssetSymbol',
            type: 'string',
          },
          {
            internalType: 'uint64',
            name: 'timestampInMs',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'price',
            type: 'uint64',
          },
        ],
        internalType: 'struct IndexPrice',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IIndexPriceAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IIndexPriceAdapterInterface {
    return new Interface(_abi) as IIndexPriceAdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): IIndexPriceAdapter {
    return new Contract(address, _abi, runner) as unknown as IIndexPriceAdapter;
  }
}
