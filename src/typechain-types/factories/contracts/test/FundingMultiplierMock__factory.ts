/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  FundingMultiplierMock,
  FundingMultiplierMockInterface,
} from '../../../contracts/test/FundingMultiplierMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'fundingMultipliers',
    outputs: [
      {
        internalType: 'int64',
        name: 'fundingMultiplier0',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'fundingMultiplier1',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'fundingMultiplier2',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'fundingMultiplier3',
        type: 'int64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'fromTimestampInMs',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'toTimestampInMs',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'lastFundingRatePublishTimestampInMs',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'positionSize',
        type: 'int64',
      },
    ],
    name: 'loadAggregatePayment',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int64',
        name: 'newFundingMultiplier',
        type: 'int64',
      },
    ],
    name: 'publishFundingMultiplier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080806040523461001657610ddb908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c8063201eadcb146103075780638716574b1461028e5763965556331461004057600080fd5b3461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004358060070b90818103610286578354156102405783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111610213576100ba90610390565b5080547fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000929060c081901d60070b84146101175750505080610114936100fe6103f3565b9384528160208501528301526060820152610442565b80f35b839194508092951c60070b1460001461017157505061011491907fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff82549160401b6fffffffffffffffff0000000000000000169116179055565b60801c60070b036101c95761011491907fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff82549160801b77ffffffffffffffff00000000000000000000000000000000169116179055565b815477ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b7fffffffffffffffff0000000000000000000000000000000000000000000000001617905580f35b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b506101149161024d6103f3565b9182527fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000080918160208501528301526060820152610442565b8380fd5b5080fd5b503461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760043591805483101561030457506102d7608092610390565b50548151918160070b835281811c60070b602084015281841c60070b9083015260c01d60070b6060820152f35b80fd5b503461028a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811681036102865760243590828216820361038c57604435928316830361038c57606435948560070b86036103045750916020949161038293610721565b90519060070b8152f35b8480fd5b9060009182548110156103c6578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b604051906080820182811067ffffffffffffffff82111761041357604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000908154680100000000000000008110156105c55780600161046792018455610390565b92909261059957509060608261059793517fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008454169067ffffffffffffffff161783556104f7602082015160070b84907fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff82549160401b6fffffffffffffffff0000000000000000169116179055565b61054c604082015160070b84907fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff82549160801b77ffffffffffffffff00000000000000000000000000000000169116179055565b0151815477ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b7fffffffffffffffff00000000000000000000000000000000000000000000000016179055565b565b807f4e487b71000000000000000000000000000000000000000000000000000000006024925280600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b906105fb6103f3565b91548060070b83528060401c60070b60208401528060801c60070b604084015260c01d60070b6060830152565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff8093160191821161066057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff918216908216039190821161066057565b60070b907fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008212677fffffffffffffff83131761066057565b9060070b9060070b01907fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008212677fffffffffffffff83131761066057565b6107318361073992969596610a5f565b939092610a5f565b8183969296146109745761075561074f84610390565b506105f2565b9367ffffffffffffffff80911694600090861561095b575b6001968781111580610954575b610938575b600281111580610931575b610911575b600310158061090a575b6108ef575b5093858101809111610660575b87811061086157506107c361074f6107fd9798610390565b91166107db6107d6835160070b85610c62565b6106a9565b94811015610845575b6002811015610825575b600314610800575b50506106e2565b90565b61081d929391606061081792015160070b90610c62565b906106e2565b9038806107f6565b9361083d600391610817604085015160070b86610c62565b9490506107ee565b9361085b90610817602084015160070b85610c62565b936107e4565b936108c09061081761087561074f88610390565b610817815160606108b56108a56108946107d68d600796870b90610c62565b6108178d6020890151870b90610c62565b6108176040870151850b8d610c62565b930151900b88610c62565b937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106605785016107ab565b90610817606061090493015160070b86610c62565b3861079e565b5086610799565b91610929600391610817604085015160070b89610c62565b92905061078f565b508761078a565b9161094e90610817602084015160070b88610c62565b9161077f565b508761077a565b905061096e6107d6825160070b86610c62565b9061076d565b939450919061074f61098591610390565b9067ffffffffffffffff80911693166000938015610a46575b600181111580610a3b575b610a1f575b600281111580610a14575b6109f4575b6003101590816109e9575b506109d357505090565b6107fd9291606061081792015160070b90610c62565b6003915014386109c9565b93610a0c600391610817604086015160070b87610c62565b9490506109be565b5060028210156109b9565b93610a3590610817602085015160070b86610c62565b936109ae565b5060018210156109a9565b9350610a596107d6835160070b85610c62565b9361099e565b9190916000908154937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501948511610b7957610aa6610aa161074f87610390565b610c00565b9460021b6803fffffffffffffffc67fffffffffffffffc821691168103610bd35767ffffffffffffffff80961601858111610bd35790610aef9291866301b77400948592610628565b16029086821691820361021357869392610b0d8593610b139361068f565b9061068f565b16041660010192808411610ba657838116610b4d57600390610b3483610628565b169316905080610b445750600390565b6107fd90610628565b6001673fffffffffffffff610b6186610628565b60021c1601818111610b795790610b34600392610628565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b7fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000009081606082015160070b03610c5b5781604082015160070b03610c54576020015160070b03610c4f57600190565b600290565b5050600390565b5050600490565b60070b9060070b90818102917f800000000000000000000000000000000000000000000000000000000000000081146000831216610660578183051490151715610660576305f5e1009005677fffffffffffffff8113610d47577fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008112610ce95760070b90565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f506970207175616e7469747920756e646572666c6f777320696e7436340000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f506970207175616e74697479206f766572666c6f777320696e743634000000006044820152fdfea2646970667358221220a077fd132e5342b4cb570b72f65844d89f273c20434ff66922c9cd923baba9fe64736f6c63430008120033';

type FundingMultiplierMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingMultiplierMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingMultiplierMock__factory extends ContractFactory {
  constructor(...args: FundingMultiplierMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FundingMultiplierMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): FundingMultiplierMock__factory {
    return super.connect(runner) as FundingMultiplierMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingMultiplierMockInterface {
    return new Interface(_abi) as FundingMultiplierMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): FundingMultiplierMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as FundingMultiplierMock;
  }
}
