/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  MathMock,
  MathMockInterface,
} from '../../../contracts/test/MathMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'a',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'b',
        type: 'uint64',
      },
    ],
    name: 'divideRoundNearest',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'a',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'b',
        type: 'uint64',
      },
    ],
    name: 'divideRoundUp',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int64',
        name: 'a',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'b',
        type: 'int64',
      },
    ],
    name: 'maxSigned',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'a',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'b',
        type: 'uint64',
      },
    ],
    name: 'maxUnsigned',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'a',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'b',
        type: 'uint64',
      },
    ],
    name: 'minUnsigned',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int64',
        name: 'multiplicand',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'fractionDividend',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'fractionDivisor',
        type: 'int64',
      },
    ],
    name: 'multiplyPipsByFractionSigned',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'multiplicand',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'fractionDividend',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'fractionDivisor',
        type: 'uint64',
      },
    ],
    name: 'multiplyPipsByFractionUnsigned',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'toInt64FromInt256',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'value',
        type: 'uint64',
      },
    ],
    name: 'toInt64FromUint64',
    outputs: [
      {
        internalType: 'int64',
        name: '',
        type: 'int64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60808060405234610016576108c5908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081634acc6b1d1461060e5750806362a08407146105bf5780638be32c26146105645780639305571e1461044f578063a1144cf2146103f2578063ac03aedf14610236578063b9e1af36146101ce578063cc807dd5146101605763e1efaf4a1461008757600080fd5b3461015d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015d576100bd610674565b906100c6610690565b67ffffffffffffffff928316806100e657505060209350915b5191168152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90929192019083821161013157506020945061012b91610126916106c7565b61070f565b916100df565b806011877f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b80fd5b5090346101ca57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ca5760209161019b610674565b6101a3610690565b67ffffffffffffffff9250828116828416116101c25750915191168152f35b9050916100df565b5080fd5b5090346101ca57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ca576020916102096106a7565b906102126106b7565b9050600781810b9083900b1261022e5750905b519060070b8152f35b905090610225565b503461015d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015d5761026e6106a7565b906102776106b7565b90604435928360070b8094036101ca5760070b9160070b808302927f800000000000000000000000000000000000000000000000000000000000000091828114848312166103c657818505149015171561039a57831561036e5782147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8414166103425750602093500590610316677fffffffffffffff8313156107c5565b6102257fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000083121561082a565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b6024826012887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024826011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248460118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5090346101ca57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ca5760209067ffffffffffffffff610447610439610674565b610441610690565b90610757565b915191168152f35b5082903461015d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015d57610489610674565b90610492610690565b6044359167ffffffffffffffff938484168094036101ca57918416918416828102928115918404141715610342578215610538575004918183116104db57506020925191168152f35b60649060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f506970207175616e74697479206f766572666c6f77732075696e7436340000006044820152fd5b806012867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5090346101ca5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ca5760209067ffffffffffffffff6105a9610674565b1690610225677fffffffffffffff8311156107c5565b50913461060a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261060a57602092503590610316677fffffffffffffff8313156107c5565b8280fd5b9050823461060a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ca57602091610649610674565b610651610690565b67ffffffffffffffff92508281168284161061066d5750168152f35b9050168152f35b6004359067ffffffffffffffff8216820361068b57565b600080fd5b6024359067ffffffffffffffff8216820361068b57565b600435908160070b820361068b57565b602435908160070b820361068b57565b9067ffffffffffffffff8091169182156106e057160490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b90600167ffffffffffffffff8093160191821161072857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90600181166107aa57677fffffffffffffff8160011c165b67ffffffffffffffff8083169182156106e05781168482169290920616106107a1576101269061079e926106c7565b90565b61079e916106c7565b6107c0677fffffffffffffff8260011c1661070f565b61076f565b156107cc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f506970207175616e74697479206f766572666c6f777320696e743634000000006044820152fd5b1561083157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f506970207175616e7469747920756e646572666c6f777320696e7436340000006044820152fdfea2646970667358221220ebdde836997be085640013b0110375e3616186847c6849111f6f400bcca1482c64736f6c63430008120033';

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MathMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MathMock__factory {
    return super.connect(runner) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new Interface(_abi) as MathMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MathMock {
    return new Contract(address, _abi, runner) as unknown as MathMock;
  }
}
