/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../../common';
import type {
  GovernanceMock,
  GovernanceMockInterface,
} from '../../../../contracts/test/GovernanceMock.sol/GovernanceMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sourceAsset',
        type: 'address',
      },
    ],
    name: 'migrateAsset',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'assetMigrator',
        type: 'address',
      },
    ],
    name: 'setAssetMigrator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IGovernanceMockCustodian',
        name: 'newCustodian',
        type: 'address',
      },
    ],
    name: 'setCustodian',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newExchange',
        type: 'address',
      },
    ],
    name: 'setExchange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newGovernance',
        type: 'address',
      },
    ],
    name: 'setGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60808060405234610016576104b3908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163403f3731146103c05784826367b1f5df14610314579050816394756816146101c4578163ab033ea914610122575063ce3c11701461005d57600080fd5b82913461011e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e5781359173ffffffffffffffffffffffffffffffffffffffff80841680940361011a5784541692833b1561011a576024859283855196879485937fce3c11700000000000000000000000000000000000000000000000000000000085528401525af190811561011157506100fe5750f35b6101079061043a565b61010e5780f35b80fd5b513d84823e3d90fd5b8480fd5b5050fd5b9290503461011e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e5781359173ffffffffffffffffffffffffffffffffffffffff80841680940361011a5784541692833b1561011a576024859283855196879485937fab033ea90000000000000000000000000000000000000000000000000000000085528401525af190811561011157506100fe5750f35b828185346103105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103105782359273ffffffffffffffffffffffffffffffffffffffff9384811680910361030c5760209060248686541691855196879384927f94756816000000000000000000000000000000000000000000000000000000008452878401525af1801561030257610261578480f35b6020913d83116102fa575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011684019184831067ffffffffffffffff8411176102cc5750526020908201829003126102c857519081160361010e57818080808480f35b8280fd5b6041907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b3d925061026c565b82513d87823e3d90fd5b8380fd5b5080fd5b91509291346103105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031057803573ffffffffffffffffffffffffffffffffffffffff80821680920361030c5783541690813b1561030c578360249287949285937f67b1f5df0000000000000000000000000000000000000000000000000000000085528401525af190811561011157506103b4575080f35b6103bd9061043a565b80f35b8483346103105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610310573573ffffffffffffffffffffffffffffffffffffffff8116809103610310577fffffffffffffffffffffffff000000000000000000000000000000000000000082541617815580f35b67ffffffffffffffff811161044e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122077246ec2461b67ab60398f47d2fdafeb17d5a1fe573c2629e56fb0153dcaf77964736f6c63430008120033';

type GovernanceMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernanceMock__factory extends ContractFactory {
  constructor(...args: GovernanceMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GovernanceMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GovernanceMock__factory {
    return super.connect(runner) as GovernanceMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceMockInterface {
    return new Interface(_abi) as GovernanceMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): GovernanceMock {
    return new Contract(address, _abi, runner) as unknown as GovernanceMock;
  }
}
