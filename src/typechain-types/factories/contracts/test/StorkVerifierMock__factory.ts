/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  StorkVerifierMock,
  StorkVerifierMockInterface,
} from '../../../contracts/test/StorkVerifierMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'oracle_pubkey',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'asset_pair_id',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
    ],
    name: 'verifySignature',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608080604052346100165761030a908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b6000803560e01c639c8817151461002a57600080fd5b346102615760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102615760043573ffffffffffffffffffffffffffffffffffffffff8082169182810361025d576024359567ffffffffffffffff91828811610259573660238901121561025957876004013583811161020d576020986100dc8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160185610264565b81845236602483830101116102555781889260248c9301838701378401015260c4359160ff8316809303610251578751907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008a83019360601b168352818151918b8a5b84811061023a5750505080610170926074920160443560348201526064356054820152036054810184520182610264565b51902090865191888301907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008252603c840152603c835260608301938385109085111761020d579286926080928a95838b528251902083528382015260843560a082015260c060a43591015282805260015afa1561020357825116036101fd57506001905b519015158152f35b906101f5565b83513d84823e3d90fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80830182015186820160340152859350810161013f565b8680fd5b8780fd5b8580fd5b8380fd5b80fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102a557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212202c015a922d83c732d9716e5057bd04332ba6aa39afbcb2995a7f2d6b60e8eb4164736f6c63430008120033';

type StorkVerifierMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorkVerifierMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorkVerifierMock__factory extends ContractFactory {
  constructor(...args: StorkVerifierMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StorkVerifierMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StorkVerifierMock__factory {
    return super.connect(runner) as StorkVerifierMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorkVerifierMockInterface {
    return new Interface(_abi) as StorkVerifierMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): StorkVerifierMock {
    return new Contract(address, _abi, runner) as unknown as StorkVerifierMock;
  }
}
