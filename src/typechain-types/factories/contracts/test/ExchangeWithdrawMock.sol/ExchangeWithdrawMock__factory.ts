/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../../common';
import type {
  ExchangeWithdrawMock,
  ExchangeWithdrawMockInterface,
} from '../../../../contracts/test/ExchangeWithdrawMock.sol/ExchangeWithdrawMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract ICustodianMock',
        name: 'newCustodian',
        type: 'address',
      },
    ],
    name: 'setCustodian',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address payable',
        name: 'wallet',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'quantityInAssetUnits',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60808060405234610016576101fb908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c8063403f3731146101475763d9caed121461003557600080fd5b346101435760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610143578160043573ffffffffffffffffffffffffffffffffffffffff80821680920361013f576024359080821680920361013b5783541690813b1561013b578360649286949285937fd9caed120000000000000000000000000000000000000000000000000000000085526004850152602484015260443560448401525af18015610130576100ee575080f35b67ffffffffffffffff81116101035760405280f35b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6040513d84823e3d90fd5b8380fd5b8280fd5b5080fd5b82346101c25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c25760043573ffffffffffffffffffffffffffffffffffffffff8116809103610143577fffffffffffffffffffffffff000000000000000000000000000000000000000082541617815580f35b80fdfea264697066735822122012d7cef94e0b69cf58481834d1abe2f48fc70fbc2cb3cc83b4775d17978ef0e364736f6c63430008120033';

type ExchangeWithdrawMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeWithdrawMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeWithdrawMock__factory extends ContractFactory {
  constructor(...args: ExchangeWithdrawMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExchangeWithdrawMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): ExchangeWithdrawMock__factory {
    return super.connect(runner) as ExchangeWithdrawMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeWithdrawMockInterface {
    return new Interface(_abi) as ExchangeWithdrawMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): ExchangeWithdrawMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as ExchangeWithdrawMock;
  }
}
