/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  ExchangeIndexPriceAdapterMock,
  ExchangeIndexPriceAdapterMockInterface,
} from '../../../contracts/test/ExchangeIndexPriceAdapterMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IIndexPriceAdapter',
        name: 'indexPriceAdapter_',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'baseAssetSymbol',
            type: 'string',
          },
          {
            internalType: 'uint64',
            name: 'timestampInMs',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'price',
            type: 'uint64',
          },
        ],
        indexed: false,
        internalType: 'struct IndexPrice',
        name: 'indexPrice',
        type: 'tuple',
      },
    ],
    name: 'ValidatedIndexPrice',
    type: 'event',
  },
  {
    inputs: [],
    name: 'indexPriceAdapter',
    outputs: [
      {
        internalType: 'contract IIndexPriceAdapter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'loadMarketsLength',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'payload',
        type: 'bytes',
      },
    ],
    name: 'validateIndexPricePayload',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60803461007457601f61053638819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516104a690816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816305dfbb23146102f8575080630d1c46eb146102bc5763d074ea451461004357600080fd5b8190346102b9576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102b55767ffffffffffffffff906004358281116102b157366023820112156102b1578060040135906100a3826103b6565b6100af86519182610346565b82815236602484840101116102a357868484829560246101269601838601378301015273ffffffffffffffffffffffffffffffffffffffff8354169086519788809481937fd074ea45000000000000000000000000000000000000000000000000000000008352886004840152602483019061042d565b03925af19182156102a7578592610190575b7f6ac2841f9a5f9316ed7080a1966613a9323a81e5168620ce829ad8c281b3de9294508351938493838552826101798251606087890152608088019061042d565b94820151168286015201511660608301520390a180f35b91503d8086863e6101a18186610346565b840193818186031261029f578051908382116102a3570160608186031261029f578351906060820182811085821117610272578552805184811161026e5781019086601f8301121561026e578151906101f9826103b6565b976102068851998a610346565b82895285838501011161026a578761024988936102609588807f6ac2841f9a5f9316ed7080a1966613a9323a81e5168620ce829ad8c281b3de929d0191016103f0565b8452610256858201610413565b8585015201610413565b8482015291610138565b8880fd5b8780fd5b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8580fd5b8680fd5b83513d87823e3d90fd5b8480fd5b5050fd5b50fd5b50346102f457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45751908152602090f35b5080fd5b8390346102f457817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761038757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161038757601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381106104035750506000910152565b81810151838201526020016103f3565b519067ffffffffffffffff8216820361042857565b600080fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610469815180928187528780880191016103f0565b011601019056fea2646970667358221220c99dc7757737b06970300943ffb94c7ec3d5d17ffa5a14418eaa9fa491907f5d64736f6c63430008120033';

type ExchangeIndexPriceAdapterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeIndexPriceAdapterMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeIndexPriceAdapterMock__factory extends ContractFactory {
  constructor(...args: ExchangeIndexPriceAdapterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    indexPriceAdapter_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(indexPriceAdapter_, overrides || {});
  }
  override deploy(
    indexPriceAdapter_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(indexPriceAdapter_, overrides || {}) as Promise<
      ExchangeIndexPriceAdapterMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): ExchangeIndexPriceAdapterMock__factory {
    return super.connect(runner) as ExchangeIndexPriceAdapterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeIndexPriceAdapterMockInterface {
    return new Interface(_abi) as ExchangeIndexPriceAdapterMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): ExchangeIndexPriceAdapterMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as ExchangeIndexPriceAdapterMock;
  }
}
