/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  ChainlinkAggregatorMock,
  ChainlinkAggregatorMockInterface,
} from '../../../contracts/test/ChainlinkAggregatorMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'adminWallet',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'description',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint80',
        name: '_roundId',
        type: 'uint80',
      },
    ],
    name: 'getRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ownerWallet',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'price',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'removeAdmin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'removeOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newAdmin',
        type: 'address',
      },
    ],
    name: 'setAdmin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'decimals_',
        type: 'uint8',
      },
    ],
    name: 'setDecimals',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'setOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'newPrice',
        type: 'int256',
      },
    ],
    name: 'setPrice',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'version',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080806040523461004e57600080546001600160a01b03191633908117909155600180546001600160a81b03191660ff60a01b1990921691909117600160a31b1790556108ef90816100548239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c90816313af4035146106cd578163246f8b9614610654578163313ce5671461061157816336b19cd7146105be57816354fd4d5014610583578163704b6c02146104585781637284e4161461034f5781637a1395aa146102cb5781639335dcb71461027a5781639a202d47146101fb5781639a6fc8f51461018b578163a035b1fe1461014e578163f7a3080614610116575063feaf968c146100bd57600080fd5b3461011257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101125760a09060025490805191600183526020830152429082015242606082015260016080820152f35b5080fd5b8390346101125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610112573560025580f35b50503461011257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610112576020906002549051908152f35b9050346101f75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f757359069ffffffffffffffffffff82168092036101f75760a0925060025481519283526020830152429082015242606082015260016080820152f35b8280fd5b833461027757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102775761024c73ffffffffffffffffffffffffffffffffffffffff82541633146107ef565b7fffffffffffffffffffffffff00000000000000000000000000000000000000006001541660015580f35b80fd5b50503461011257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101125773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b8390346101125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610112573560ff81168103610112577fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000006001549260a01b1691161760015580f35b9050346101f757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f7578151908282019082821067ffffffffffffffff83111761042c57508252600a81526020907f44494c202f2055534443000000000000000000000000000000000000000000008282015282519382859384528251928382860152825b84811061041657505050828201840152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b81810183015188820188015287955082016103da565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b919050346101f75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f75781359173ffffffffffffffffffffffffffffffffffffffff9182841680940361057f576104bb8386541633146107ef565b6104c6841515610854565b60015492831684146104fd5750507fffffffffffffffffffffffff0000000000000000000000000000000000000000161760015580f35b90602060849251917f08c379a00000000000000000000000000000000000000000000000000000000083528201526024808201527f4d75737420626520646966666572656e742066726f6d2063757272656e74206160448201527f646d696e000000000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b919050346101f757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f7576020925051908152f35b50503461011257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101125760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b50503461011257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101125760209060ff60015460a01c169051908152f35b833461027757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610277577fffffffffffffffffffffffff000000000000000000000000000000000000000081546106c773ffffffffffffffffffffffffffffffffffffffff821633146107ef565b16815580f35b919050346101f75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f75781359173ffffffffffffffffffffffffffffffffffffffff9182841680940361057f5784549283166107328133146107ef565b61073d851515610854565b841461076d5750507fffffffffffffffffffffffff00000000000000000000000000000000000000001617815580f35b90602060849251917f08c379a00000000000000000000000000000000000000000000000000000000083528201526024808201527f4d75737420626520646966666572656e742066726f6d2063757272656e74206f60448201527f776e6572000000000000000000000000000000000000000000000000000000006064820152fd5b156107f657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c6572206d757374206265204f776e65722077616c6c657400000000006044820152fd5b1561085b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642077616c6c65742061646472657373000000000000000000006044820152fdfea264697066735822122077ac659e11a79c8526e97ea75aaf669e513aa7f9bb7377e02610a34069c39e8064736f6c63430008120033';

type ChainlinkAggregatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkAggregatorMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkAggregatorMock__factory extends ContractFactory {
  constructor(...args: ChainlinkAggregatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ChainlinkAggregatorMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): ChainlinkAggregatorMock__factory {
    return super.connect(runner) as ChainlinkAggregatorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkAggregatorMockInterface {
    return new Interface(_abi) as ChainlinkAggregatorMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): ChainlinkAggregatorMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as ChainlinkAggregatorMock;
  }
}
