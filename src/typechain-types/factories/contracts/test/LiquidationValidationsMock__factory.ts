/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  LiquidationValidationsMock,
  LiquidationValidationsMockInterface,
} from '../../../contracts/test/LiquidationValidationsMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'indexPrice',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'maintenanceMarginFraction',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'positionSize',
        type: 'int64',
      },
      {
        internalType: 'int256',
        name: 'totalAccountValueInDoublePips',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'totalMaintenanceMarginRequirementInTriplePips',
        type: 'uint256',
      },
    ],
    name: 'calculateQuoteQuantityAtBankruptcyPrice',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'indexPrice',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'positionSize',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'quoteQuantity',
        type: 'uint64',
      },
    ],
    name: 'validateDeactivatedMarketLiquidationQuoteQuantity',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'baseQuantity',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'costBasis',
        type: 'int64',
      },
      {
        internalType: 'int64',
        name: 'positionSize',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'quoteQuantity',
        type: 'uint64',
      },
    ],
    name: 'validateInsuranceFundClosureQuoteQuantity',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'indexPrice',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'liquidationBaseQuantity',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'liquidationQuoteQuantity',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'maintenanceMarginFraction',
        type: 'uint64',
      },
      {
        internalType: 'int256',
        name: 'totalAccountValueInDoublePips',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'totalMaintenanceMarginRequirementInTriplePips',
        type: 'uint256',
      },
    ],
    name: 'validateQuoteQuantityAtBankruptcyPrice',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int64',
        name: 'costBasis',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'indexPrice',
        type: 'uint64',
      },
      {
        internalType: 'int64',
        name: 'liquidationBaseQuantity',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'liquidationQuoteQuantity',
        type: 'uint64',
      },
    ],
    name: 'validateQuoteQuantityAtExitPrice',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60808060405234610016576109a7908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806338da154a146102f0578063682fe683146102835780636af6448e14610226578063c54a48f01461019c5763fb705c421461005457600080fd5b346101995760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101995761008b610431565b6100936103f3565b6100d561009e6103de565b926100b36100ad6100ad61041a565b94610826565b906100cd67ffffffffffffffff95868080941691166104cd565b91169061073b565b9180831161013b578080610114941692831560001461012e57816100fd60ff885b16866108b0565b91169283911611159283610117575b5050506108e3565b80f35b610123919293506108ca565b16101538808061010c565b816100fd60ff60016100f6565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f506970207175616e74697479206f766572666c6f77732075696e7436340000006044820152fd5b80fd5b50346101995760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610199576101146101d7610431565b6102016101e26103f3565b6101ea610448565b926101f361041a565b9160a43592608435926104e0565b9067ffffffffffffffff80918184161560001461012e57816100fd60ff8816866108b0565b50346101995760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019957610114610261610431565b61020161026c6103f3565b9161027e610278610448565b93610826565b610948565b50346101995760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101995760206102de6102c0610431565b6102c8610403565b906102d16103de565b60843592606435926104e0565b67ffffffffffffffff60405191168152f35b50346101995760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610199576004358060070b81036103da5761011490610339610403565b906103426103de565b908461035961034f61041a565b9461027e85610826565b9260070b12156103ae5761036c90610826565b67ffffffffffffffff818116908316106103a75750905b67ffffffffffffffff80918184161560001461012e57816100fd60ff8816866108b0565b9050610201565b6103b790610826565b67ffffffffffffffff818116908316116103d357505b90610383565b90506103cd565b5080fd5b604435908160070b82036103ee57565b600080fd5b602435908160070b82036103ee57565b6024359067ffffffffffffffff821682036103ee57565b6064359067ffffffffffffffff821682036103ee57565b6004359067ffffffffffffffff821682036103ee57565b6044359067ffffffffffffffff821682036103ee57565b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661049e57818405149015171561049e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561049e57565b919290928415610731576105459060070b9461053667ffffffffffffffff80951695610524677fffffffffffffff9761051b8982111561084b565b60070b8961045f565b9561052e87610815565b9116906104cd565b61053f84610815565b90610774565b906000131561070a576001905b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610686576105829161045f565b906000828201928312911290801582169115161761049e576305f5e10090059160008112908161067b575b8115610660575b50610659576105c59082131561084b565b7fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000081126105fb576105f89060070b610826565b90565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f506970207175616e7469747920756e646572666c6f777320696e7436340000006044820152fd5b5050600090565b600091501380610671575b386105b4565b506000821261066b565b6000841391506105ad565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610552565b5050505050600090565b8115610745570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828409928281029283808610950394808603951461080857848311156103ee578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050906105f8925061073b565b6000808212610822575090565b0390565b6000600782900b811361084257505b67ffffffffffffffff1690565b0360070b610835565b1561085257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f506970207175616e74697479206f766572666c6f777320696e743634000000006044820152fd5b67ffffffffffffffff918216908216039190821161049e57565b90600167ffffffffffffffff8093160191821161049e57565b156108ea57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642071756f7465207175616e74697479000000000000000000006044820152fd5b6109656305f5e1009167ffffffffffffffff8080951691166104cd565b0481811161013b57169056fea2646970667358221220e9dd4fe05a4cc7f907fb52a094b7ff39d0a0e5da35c946e3289b209660ceb2e764736f6c63430008120033';

type LiquidationValidationsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidationValidationsMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidationValidationsMock__factory extends ContractFactory {
  constructor(...args: LiquidationValidationsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LiquidationValidationsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): LiquidationValidationsMock__factory {
    return super.connect(runner) as LiquidationValidationsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidationValidationsMockInterface {
    return new Interface(_abi) as LiquidationValidationsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): LiquidationValidationsMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as LiquidationValidationsMock;
  }
}
