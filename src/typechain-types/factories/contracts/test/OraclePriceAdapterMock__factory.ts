/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  OraclePriceAdapterMock,
  OraclePriceAdapterMockInterface,
} from '../../../contracts/test/OraclePriceAdapterMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    name: 'loadPriceForBaseAssetSymbol',
    outputs: [
      {
        internalType: 'uint64',
        name: 'price',
        type: 'uint64',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IExchange',
        name: '',
        type: 'address',
      },
    ],
    name: 'setActive',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60808060405234610016576101bd908161001c8239f35b600080fdfe608060048036101561001057600080fd5b600091823560e01c908163701406a91461008a575063c06e0ada1461003457600080fd5b346100865760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610086573573ffffffffffffffffffffffffffffffffffffffff8116036100835780f35b80fd5b5080fd5b919050346101835760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101835780359167ffffffffffffffff80841161017f573660238501121561017f578383013592818411610153577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8701160116830191838310908311176101535750604052818152366024838501011161014f5781602460209401848301370101526020604051642e90edd0008152f35b8380fd5b8560416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b8280fdfea2646970667358221220b1d7620617b76048388a4278a9efaab6f43083dab6214f186c6b79abaa162d3364736f6c63430008120033';

type OraclePriceAdapterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OraclePriceAdapterMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OraclePriceAdapterMock__factory extends ContractFactory {
  constructor(...args: OraclePriceAdapterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OraclePriceAdapterMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null,
  ): OraclePriceAdapterMock__factory {
    return super.connect(runner) as OraclePriceAdapterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OraclePriceAdapterMockInterface {
    return new Interface(_abi) as OraclePriceAdapterMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): OraclePriceAdapterMock {
    return new Contract(
      address,
      _abi,
      runner,
    ) as unknown as OraclePriceAdapterMock;
  }
}
